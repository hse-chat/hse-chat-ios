// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file HseMsg.proto

import Foundation
import ProtocolBuffers


public struct HseMsg { }

public func == (lhs: HseMsg.Message_, rhs: HseMsg.Message_) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAuthor == rhs.hasAuthor) && (!lhs.hasAuthor || lhs.author == rhs.author)
  fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
  fieldCheck = fieldCheck && (lhs.hasDate == rhs.hasDate) && (!lhs.hasDate || lhs.date == rhs.date)
  fieldCheck = fieldCheck && (lhs.hasReceiver == rhs.hasReceiver) && (!lhs.hasReceiver || lhs.receiver == rhs.receiver)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.User, rhs: HseMsg.User) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request, rhs: HseMsg.Request) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSignUp == rhs.hasSignUp) && (!lhs.hasSignUp || lhs.signUp == rhs.signUp)
  fieldCheck = fieldCheck && (lhs.hasSignIn == rhs.hasSignIn) && (!lhs.hasSignIn || lhs.signIn == rhs.signIn)
  fieldCheck = fieldCheck && (lhs.hasGetUsers == rhs.hasGetUsers) && (!lhs.hasGetUsers || lhs.getUsers == rhs.getUsers)
  fieldCheck = fieldCheck && (lhs.hasGetMessagesWithUser == rhs.hasGetMessagesWithUser) && (!lhs.hasGetMessagesWithUser || lhs.getMessagesWithUser == rhs.getMessagesWithUser)
  fieldCheck = fieldCheck && (lhs.hasSendMessageToUser == rhs.hasSendMessageToUser) && (!lhs.hasSendMessageToUser || lhs.sendMessageToUser == rhs.sendMessageToUser)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request.SignUp, rhs: HseMsg.Request.SignUp) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request.SignIn, rhs: HseMsg.Request.SignIn) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request.GetUsers, rhs: HseMsg.Request.GetUsers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request.GetMessagesWithUser, rhs: HseMsg.Request.GetMessagesWithUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasWith == rhs.hasWith) && (!lhs.hasWith || lhs.with == rhs.with)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Request.SendMessageToUser, rhs: HseMsg.Request.SendMessageToUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasReceiver == rhs.hasReceiver) && (!lhs.hasReceiver || lhs.receiver == rhs.receiver)
  fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result, rhs: HseMsg.Result) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSignUp == rhs.hasSignUp) && (!lhs.hasSignUp || lhs.signUp == rhs.signUp)
  fieldCheck = fieldCheck && (lhs.hasSignIn == rhs.hasSignIn) && (!lhs.hasSignIn || lhs.signIn == rhs.signIn)
  fieldCheck = fieldCheck && (lhs.hasGetUsers == rhs.hasGetUsers) && (!lhs.hasGetUsers || lhs.getUsers == rhs.getUsers)
  fieldCheck = fieldCheck && (lhs.hasGetMessagesWithUser == rhs.hasGetMessagesWithUser) && (!lhs.hasGetMessagesWithUser || lhs.getMessagesWithUser == rhs.getMessagesWithUser)
  fieldCheck = fieldCheck && (lhs.hasSendMessageToUser == rhs.hasSendMessageToUser) && (!lhs.hasSendMessageToUser || lhs.sendMessageToUser == rhs.sendMessageToUser)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result.SignUpResult, rhs: HseMsg.Result.SignUpResult) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result.SignInResult, rhs: HseMsg.Result.SignInResult) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result.GetUsersResult, rhs: HseMsg.Result.GetUsersResult) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.users == rhs.users)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result.GetMessagesWithUserResult, rhs: HseMsg.Result.GetMessagesWithUserResult) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.messages == rhs.messages)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.Result.SendMessageToUserResult, rhs: HseMsg.Result.SendMessageToUserResult) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.ServerMessage, rhs: HseMsg.ServerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEvent == rhs.hasEvent) && (!lhs.hasEvent || lhs.event == rhs.event)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.ServerMessage.NewMessage, rhs: HseMsg.ServerMessage.NewMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMessage_ == rhs.hasMessage_) && (!lhs.hasMessage_ || lhs.message_ == rhs.message_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.ServerMessage.NewUser, rhs: HseMsg.ServerMessage.NewUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: HseMsg.ServerMessage.Event, rhs: HseMsg.ServerMessage.Event) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasNewMessage == rhs.hasNewMessage) && (!lhs.hasNewMessage || lhs.newMessage == rhs.newMessage)
  fieldCheck = fieldCheck && (lhs.hasNewUser == rhs.hasNewUser) && (!lhs.hasNewUser || lhs.newUser == rhs.newUser)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension HseMsg {
  public struct HseMsgRoot {
    public static var sharedInstance : HseMsgRoot {
     struct Static {
         static let instance : HseMsgRoot = HseMsgRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Message_ : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var author:String = ""

    public private(set) var hasAuthor:Bool = false
    public private(set) var text:String = ""

    public private(set) var hasText:Bool = false
    public private(set) var date:Int64 = Int64(0)

    public private(set) var hasDate:Bool = false
    public private(set) var receiver:String = ""

    public private(set) var hasReceiver:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasAuthor {
        return false
      }
      if !hasText {
        return false
      }
      if !hasDate {
        return false
      }
      if !hasReceiver {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasAuthor {
        try output.writeString(1, value:author)
      }
      if hasText {
        try output.writeString(2, value:text)
      }
      if hasDate {
        try output.writeInt64(3, value:date)
      }
      if hasReceiver {
        try output.writeString(4, value:receiver)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAuthor {
        serialize_size += author.computeStringSize(1)
      }
      if hasText {
        serialize_size += text.computeStringSize(2)
      }
      if hasDate {
        serialize_size += date.computeInt64Size(3)
      }
      if hasReceiver {
        serialize_size += receiver.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Message_> {
      var mergedArray = Array<HseMsg.Message_>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Message_? {
      return try HseMsg.Message_.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Message_ {
      return try HseMsg.Message_.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> HseMsg.Message_.Builder {
      return HseMsg.Message_.classBuilder() as! HseMsg.Message_.Builder
    }
    public func getBuilder() -> HseMsg.Message_.Builder {
      return classBuilder() as! HseMsg.Message_.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return HseMsg.Message_.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return HseMsg.Message_.Builder()
    }
    public func toBuilder() throws -> HseMsg.Message_.Builder {
      return try HseMsg.Message_.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:HseMsg.Message_) throws -> HseMsg.Message_.Builder {
      return try HseMsg.Message_.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasAuthor {
        output += "\(indent) author: \(author) \n"
      }
      if hasText {
        output += "\(indent) text: \(text) \n"
      }
      if hasDate {
        output += "\(indent) date: \(date) \n"
      }
      if hasReceiver {
        output += "\(indent) receiver: \(receiver) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAuthor {
               hashCode = (hashCode &* 31) &+ author.hashValue
            }
            if hasText {
               hashCode = (hashCode &* 31) &+ text.hashValue
            }
            if hasDate {
               hashCode = (hashCode &* 31) &+ date.hashValue
            }
            if hasReceiver {
               hashCode = (hashCode &* 31) &+ receiver.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "HseMsg.Message_"
    }
    override public func className() -> String {
        return "HseMsg.Message_"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return HseMsg.Message_.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:HseMsg.Message_ = HseMsg.Message_()
      public func getMessage() -> HseMsg.Message_ {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAuthor:Bool {
           get {
                return builderResult.hasAuthor
           }
      }
      public var author:String {
           get {
                return builderResult.author
           }
           set (value) {
               builderResult.hasAuthor = true
               builderResult.author = value
           }
      }
      public func setAuthor(value:String) -> HseMsg.Message_.Builder {
        self.author = value
        return self
      }
      public func clearAuthor() -> HseMsg.Message_.Builder{
           builderResult.hasAuthor = false
           builderResult.author = ""
           return self
      }
      public var hasText:Bool {
           get {
                return builderResult.hasText
           }
      }
      public var text:String {
           get {
                return builderResult.text
           }
           set (value) {
               builderResult.hasText = true
               builderResult.text = value
           }
      }
      public func setText(value:String) -> HseMsg.Message_.Builder {
        self.text = value
        return self
      }
      public func clearText() -> HseMsg.Message_.Builder{
           builderResult.hasText = false
           builderResult.text = ""
           return self
      }
      public var hasDate:Bool {
           get {
                return builderResult.hasDate
           }
      }
      public var date:Int64 {
           get {
                return builderResult.date
           }
           set (value) {
               builderResult.hasDate = true
               builderResult.date = value
           }
      }
      public func setDate(value:Int64) -> HseMsg.Message_.Builder {
        self.date = value
        return self
      }
      public func clearDate() -> HseMsg.Message_.Builder{
           builderResult.hasDate = false
           builderResult.date = Int64(0)
           return self
      }
      public var hasReceiver:Bool {
           get {
                return builderResult.hasReceiver
           }
      }
      public var receiver:String {
           get {
                return builderResult.receiver
           }
           set (value) {
               builderResult.hasReceiver = true
               builderResult.receiver = value
           }
      }
      public func setReceiver(value:String) -> HseMsg.Message_.Builder {
        self.receiver = value
        return self
      }
      public func clearReceiver() -> HseMsg.Message_.Builder{
           builderResult.hasReceiver = false
           builderResult.receiver = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> HseMsg.Message_.Builder {
        builderResult = HseMsg.Message_()
        return self
      }
      public override func clone() throws -> HseMsg.Message_.Builder {
        return try HseMsg.Message_.builderWithPrototype(builderResult)
      }
      public override func build() throws -> HseMsg.Message_ {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> HseMsg.Message_ {
        let returnMe:HseMsg.Message_ = builderResult
        return returnMe
      }
      public func mergeFrom(other:HseMsg.Message_) throws -> HseMsg.Message_.Builder {
        if other == HseMsg.Message_() {
         return self
        }
        if other.hasAuthor {
             author = other.author
        }
        if other.hasText {
             text = other.text
        }
        if other.hasDate {
             date = other.date
        }
        if other.hasReceiver {
             receiver = other.receiver
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Message_.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Message_.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            author = try input.readString()

          case 18 :
            text = try input.readString()

          case 24 :
            date = try input.readInt64()

          case 34 :
            receiver = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class User : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var username:String = ""

    public private(set) var hasUsername:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasUsername {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUsername {
        try output.writeString(1, value:username)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUsername {
        serialize_size += username.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.User> {
      var mergedArray = Array<HseMsg.User>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.User? {
      return try HseMsg.User.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.User {
      return try HseMsg.User.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> HseMsg.User.Builder {
      return HseMsg.User.classBuilder() as! HseMsg.User.Builder
    }
    public func getBuilder() -> HseMsg.User.Builder {
      return classBuilder() as! HseMsg.User.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return HseMsg.User.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return HseMsg.User.Builder()
    }
    public func toBuilder() throws -> HseMsg.User.Builder {
      return try HseMsg.User.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:HseMsg.User) throws -> HseMsg.User.Builder {
      return try HseMsg.User.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "HseMsg.User"
    }
    override public func className() -> String {
        return "HseMsg.User"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return HseMsg.User.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:HseMsg.User = HseMsg.User()
      public func getMessage() -> HseMsg.User {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUsername:Bool {
           get {
                return builderResult.hasUsername
           }
      }
      public var username:String {
           get {
                return builderResult.username
           }
           set (value) {
               builderResult.hasUsername = true
               builderResult.username = value
           }
      }
      public func setUsername(value:String) -> HseMsg.User.Builder {
        self.username = value
        return self
      }
      public func clearUsername() -> HseMsg.User.Builder{
           builderResult.hasUsername = false
           builderResult.username = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> HseMsg.User.Builder {
        builderResult = HseMsg.User()
        return self
      }
      public override func clone() throws -> HseMsg.User.Builder {
        return try HseMsg.User.builderWithPrototype(builderResult)
      }
      public override func build() throws -> HseMsg.User {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> HseMsg.User {
        let returnMe:HseMsg.User = builderResult
        return returnMe
      }
      public func mergeFrom(other:HseMsg.User) throws -> HseMsg.User.Builder {
        if other == HseMsg.User() {
         return self
        }
        if other.hasUsername {
             username = other.username
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.User.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.User.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            username = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Request : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class SignUp : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var username:String = ""

        public private(set) var hasUsername:Bool = false
        public private(set) var password:String = ""

        public private(set) var hasPassword:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasUsername {
            return false
          }
          if !hasPassword {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUsername {
            try output.writeString(1, value:username)
          }
          if hasPassword {
            try output.writeString(2, value:password)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUsername {
            serialize_size += username.computeStringSize(1)
          }
          if hasPassword {
            serialize_size += password.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request.SignUp> {
          var mergedArray = Array<HseMsg.Request.SignUp>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SignUp? {
          return try HseMsg.Request.SignUp.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignUp {
          return try HseMsg.Request.SignUp.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Request.SignUp.Builder {
          return HseMsg.Request.SignUp.classBuilder() as! HseMsg.Request.SignUp.Builder
        }
        public func getBuilder() -> HseMsg.Request.SignUp.Builder {
          return classBuilder() as! HseMsg.Request.SignUp.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SignUp.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SignUp.Builder()
        }
        public func toBuilder() throws -> HseMsg.Request.SignUp.Builder {
          return try HseMsg.Request.SignUp.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Request.SignUp) throws -> HseMsg.Request.SignUp.Builder {
          return try HseMsg.Request.SignUp.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasUsername {
            output += "\(indent) username: \(username) \n"
          }
          if hasPassword {
            output += "\(indent) password: \(password) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUsername {
                   hashCode = (hashCode &* 31) &+ username.hashValue
                }
                if hasPassword {
                   hashCode = (hashCode &* 31) &+ password.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Request.SignUp"
        }
        override public func className() -> String {
            return "HseMsg.Request.SignUp"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Request.SignUp.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Request.SignUp = HseMsg.Request.SignUp()
          public func getMessage() -> HseMsg.Request.SignUp {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUsername:Bool {
               get {
                    return builderResult.hasUsername
               }
          }
          public var username:String {
               get {
                    return builderResult.username
               }
               set (value) {
                   builderResult.hasUsername = true
                   builderResult.username = value
               }
          }
          public func setUsername(value:String) -> HseMsg.Request.SignUp.Builder {
            self.username = value
            return self
          }
          public func clearUsername() -> HseMsg.Request.SignUp.Builder{
               builderResult.hasUsername = false
               builderResult.username = ""
               return self
          }
          public var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          public var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          public func setPassword(value:String) -> HseMsg.Request.SignUp.Builder {
            self.password = value
            return self
          }
          public func clearPassword() -> HseMsg.Request.SignUp.Builder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Request.SignUp.Builder {
            builderResult = HseMsg.Request.SignUp()
            return self
          }
          public override func clone() throws -> HseMsg.Request.SignUp.Builder {
            return try HseMsg.Request.SignUp.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Request.SignUp {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Request.SignUp {
            let returnMe:HseMsg.Request.SignUp = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Request.SignUp) throws -> HseMsg.Request.SignUp.Builder {
            if other == HseMsg.Request.SignUp() {
             return self
            }
            if other.hasUsername {
                 username = other.username
            }
            if other.hasPassword {
                 password = other.password
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SignUp.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignUp.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                username = try input.readString()

              case 18 :
                password = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class SignIn : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var username:String = ""

        public private(set) var hasUsername:Bool = false
        public private(set) var password:String = ""

        public private(set) var hasPassword:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasUsername {
            return false
          }
          if !hasPassword {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUsername {
            try output.writeString(1, value:username)
          }
          if hasPassword {
            try output.writeString(2, value:password)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUsername {
            serialize_size += username.computeStringSize(1)
          }
          if hasPassword {
            serialize_size += password.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request.SignIn> {
          var mergedArray = Array<HseMsg.Request.SignIn>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SignIn? {
          return try HseMsg.Request.SignIn.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignIn {
          return try HseMsg.Request.SignIn.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Request.SignIn.Builder {
          return HseMsg.Request.SignIn.classBuilder() as! HseMsg.Request.SignIn.Builder
        }
        public func getBuilder() -> HseMsg.Request.SignIn.Builder {
          return classBuilder() as! HseMsg.Request.SignIn.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SignIn.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SignIn.Builder()
        }
        public func toBuilder() throws -> HseMsg.Request.SignIn.Builder {
          return try HseMsg.Request.SignIn.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Request.SignIn) throws -> HseMsg.Request.SignIn.Builder {
          return try HseMsg.Request.SignIn.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasUsername {
            output += "\(indent) username: \(username) \n"
          }
          if hasPassword {
            output += "\(indent) password: \(password) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUsername {
                   hashCode = (hashCode &* 31) &+ username.hashValue
                }
                if hasPassword {
                   hashCode = (hashCode &* 31) &+ password.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Request.SignIn"
        }
        override public func className() -> String {
            return "HseMsg.Request.SignIn"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Request.SignIn.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Request.SignIn = HseMsg.Request.SignIn()
          public func getMessage() -> HseMsg.Request.SignIn {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUsername:Bool {
               get {
                    return builderResult.hasUsername
               }
          }
          public var username:String {
               get {
                    return builderResult.username
               }
               set (value) {
                   builderResult.hasUsername = true
                   builderResult.username = value
               }
          }
          public func setUsername(value:String) -> HseMsg.Request.SignIn.Builder {
            self.username = value
            return self
          }
          public func clearUsername() -> HseMsg.Request.SignIn.Builder{
               builderResult.hasUsername = false
               builderResult.username = ""
               return self
          }
          public var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          public var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          public func setPassword(value:String) -> HseMsg.Request.SignIn.Builder {
            self.password = value
            return self
          }
          public func clearPassword() -> HseMsg.Request.SignIn.Builder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Request.SignIn.Builder {
            builderResult = HseMsg.Request.SignIn()
            return self
          }
          public override func clone() throws -> HseMsg.Request.SignIn.Builder {
            return try HseMsg.Request.SignIn.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Request.SignIn {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Request.SignIn {
            let returnMe:HseMsg.Request.SignIn = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Request.SignIn) throws -> HseMsg.Request.SignIn.Builder {
            if other == HseMsg.Request.SignIn() {
             return self
            }
            if other.hasUsername {
                 username = other.username
            }
            if other.hasPassword {
                 password = other.password
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SignIn.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SignIn.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                username = try input.readString()

              case 18 :
                password = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class GetUsers : GeneratedMessage, GeneratedMessageProtocol {
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request.GetUsers> {
          var mergedArray = Array<HseMsg.Request.GetUsers>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request.GetUsers? {
          return try HseMsg.Request.GetUsers.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetUsers {
          return try HseMsg.Request.GetUsers.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Request.GetUsers.Builder {
          return HseMsg.Request.GetUsers.classBuilder() as! HseMsg.Request.GetUsers.Builder
        }
        public func getBuilder() -> HseMsg.Request.GetUsers.Builder {
          return classBuilder() as! HseMsg.Request.GetUsers.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Request.GetUsers.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Request.GetUsers.Builder()
        }
        public func toBuilder() throws -> HseMsg.Request.GetUsers.Builder {
          return try HseMsg.Request.GetUsers.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Request.GetUsers) throws -> HseMsg.Request.GetUsers.Builder {
          return try HseMsg.Request.GetUsers.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Request.GetUsers"
        }
        override public func className() -> String {
            return "HseMsg.Request.GetUsers"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Request.GetUsers.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Request.GetUsers = HseMsg.Request.GetUsers()
          public func getMessage() -> HseMsg.Request.GetUsers {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Request.GetUsers.Builder {
            builderResult = HseMsg.Request.GetUsers()
            return self
          }
          public override func clone() throws -> HseMsg.Request.GetUsers.Builder {
            return try HseMsg.Request.GetUsers.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Request.GetUsers {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Request.GetUsers {
            let returnMe:HseMsg.Request.GetUsers = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Request.GetUsers) throws -> HseMsg.Request.GetUsers.Builder {
            if other == HseMsg.Request.GetUsers() {
             return self
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.GetUsers.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetUsers.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class GetMessagesWithUser : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var with:String = ""

        public private(set) var hasWith:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasWith {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasWith {
            try output.writeString(1, value:with)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasWith {
            serialize_size += with.computeStringSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request.GetMessagesWithUser> {
          var mergedArray = Array<HseMsg.Request.GetMessagesWithUser>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request.GetMessagesWithUser? {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetMessagesWithUser {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Request.GetMessagesWithUser.Builder {
          return HseMsg.Request.GetMessagesWithUser.classBuilder() as! HseMsg.Request.GetMessagesWithUser.Builder
        }
        public func getBuilder() -> HseMsg.Request.GetMessagesWithUser.Builder {
          return classBuilder() as! HseMsg.Request.GetMessagesWithUser.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Request.GetMessagesWithUser.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Request.GetMessagesWithUser.Builder()
        }
        public func toBuilder() throws -> HseMsg.Request.GetMessagesWithUser.Builder {
          return try HseMsg.Request.GetMessagesWithUser.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Request.GetMessagesWithUser) throws -> HseMsg.Request.GetMessagesWithUser.Builder {
          return try HseMsg.Request.GetMessagesWithUser.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasWith {
            output += "\(indent) with: \(with) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasWith {
                   hashCode = (hashCode &* 31) &+ with.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Request.GetMessagesWithUser"
        }
        override public func className() -> String {
            return "HseMsg.Request.GetMessagesWithUser"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Request.GetMessagesWithUser.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Request.GetMessagesWithUser = HseMsg.Request.GetMessagesWithUser()
          public func getMessage() -> HseMsg.Request.GetMessagesWithUser {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasWith:Bool {
               get {
                    return builderResult.hasWith
               }
          }
          public var with:String {
               get {
                    return builderResult.with
               }
               set (value) {
                   builderResult.hasWith = true
                   builderResult.with = value
               }
          }
          public func setWith(value:String) -> HseMsg.Request.GetMessagesWithUser.Builder {
            self.with = value
            return self
          }
          public func clearWith() -> HseMsg.Request.GetMessagesWithUser.Builder{
               builderResult.hasWith = false
               builderResult.with = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Request.GetMessagesWithUser.Builder {
            builderResult = HseMsg.Request.GetMessagesWithUser()
            return self
          }
          public override func clone() throws -> HseMsg.Request.GetMessagesWithUser.Builder {
            return try HseMsg.Request.GetMessagesWithUser.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Request.GetMessagesWithUser {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Request.GetMessagesWithUser {
            let returnMe:HseMsg.Request.GetMessagesWithUser = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Request.GetMessagesWithUser) throws -> HseMsg.Request.GetMessagesWithUser.Builder {
            if other == HseMsg.Request.GetMessagesWithUser() {
             return self
            }
            if other.hasWith {
                 with = other.with
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.GetMessagesWithUser.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.GetMessagesWithUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                with = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class SendMessageToUser : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var receiver:String = ""

        public private(set) var hasReceiver:Bool = false
        public private(set) var text:String = ""

        public private(set) var hasText:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasReceiver {
            return false
          }
          if !hasText {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasReceiver {
            try output.writeString(1, value:receiver)
          }
          if hasText {
            try output.writeString(2, value:text)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasReceiver {
            serialize_size += receiver.computeStringSize(1)
          }
          if hasText {
            serialize_size += text.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request.SendMessageToUser> {
          var mergedArray = Array<HseMsg.Request.SendMessageToUser>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SendMessageToUser? {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SendMessageToUser {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Request.SendMessageToUser.Builder {
          return HseMsg.Request.SendMessageToUser.classBuilder() as! HseMsg.Request.SendMessageToUser.Builder
        }
        public func getBuilder() -> HseMsg.Request.SendMessageToUser.Builder {
          return classBuilder() as! HseMsg.Request.SendMessageToUser.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SendMessageToUser.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Request.SendMessageToUser.Builder()
        }
        public func toBuilder() throws -> HseMsg.Request.SendMessageToUser.Builder {
          return try HseMsg.Request.SendMessageToUser.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Request.SendMessageToUser) throws -> HseMsg.Request.SendMessageToUser.Builder {
          return try HseMsg.Request.SendMessageToUser.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasReceiver {
            output += "\(indent) receiver: \(receiver) \n"
          }
          if hasText {
            output += "\(indent) text: \(text) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasReceiver {
                   hashCode = (hashCode &* 31) &+ receiver.hashValue
                }
                if hasText {
                   hashCode = (hashCode &* 31) &+ text.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Request.SendMessageToUser"
        }
        override public func className() -> String {
            return "HseMsg.Request.SendMessageToUser"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Request.SendMessageToUser.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Request.SendMessageToUser = HseMsg.Request.SendMessageToUser()
          public func getMessage() -> HseMsg.Request.SendMessageToUser {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasReceiver:Bool {
               get {
                    return builderResult.hasReceiver
               }
          }
          public var receiver:String {
               get {
                    return builderResult.receiver
               }
               set (value) {
                   builderResult.hasReceiver = true
                   builderResult.receiver = value
               }
          }
          public func setReceiver(value:String) -> HseMsg.Request.SendMessageToUser.Builder {
            self.receiver = value
            return self
          }
          public func clearReceiver() -> HseMsg.Request.SendMessageToUser.Builder{
               builderResult.hasReceiver = false
               builderResult.receiver = ""
               return self
          }
          public var hasText:Bool {
               get {
                    return builderResult.hasText
               }
          }
          public var text:String {
               get {
                    return builderResult.text
               }
               set (value) {
                   builderResult.hasText = true
                   builderResult.text = value
               }
          }
          public func setText(value:String) -> HseMsg.Request.SendMessageToUser.Builder {
            self.text = value
            return self
          }
          public func clearText() -> HseMsg.Request.SendMessageToUser.Builder{
               builderResult.hasText = false
               builderResult.text = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Request.SendMessageToUser.Builder {
            builderResult = HseMsg.Request.SendMessageToUser()
            return self
          }
          public override func clone() throws -> HseMsg.Request.SendMessageToUser.Builder {
            return try HseMsg.Request.SendMessageToUser.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Request.SendMessageToUser {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Request.SendMessageToUser {
            let returnMe:HseMsg.Request.SendMessageToUser = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Request.SendMessageToUser) throws -> HseMsg.Request.SendMessageToUser.Builder {
            if other == HseMsg.Request.SendMessageToUser() {
             return self
            }
            if other.hasReceiver {
                 receiver = other.receiver
            }
            if other.hasText {
                 text = other.text
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.SendMessageToUser.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.SendMessageToUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                receiver = try input.readString()

              case 18 :
                text = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Action {
      case ActionOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .ActionOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case SignUp(HseMsg.Request.SignUp)

      public static func getSignUp(value:Action) -> HseMsg.Request.SignUp? {
           switch value {
           case .SignUp(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SignIn(HseMsg.Request.SignIn)

      public static func getSignIn(value:Action) -> HseMsg.Request.SignIn? {
           switch value {
           case .SignIn(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case GetUsers(HseMsg.Request.GetUsers)

      public static func getGetUsers(value:Action) -> HseMsg.Request.GetUsers? {
           switch value {
           case .GetUsers(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case GetMessagesWithUser(HseMsg.Request.GetMessagesWithUser)

      public static func getGetMessagesWithUser(value:Action) -> HseMsg.Request.GetMessagesWithUser? {
           switch value {
           case .GetMessagesWithUser(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SendMessageToUser(HseMsg.Request.SendMessageToUser)

      public static func getSendMessageToUser(value:Action) -> HseMsg.Request.SendMessageToUser? {
           switch value {
           case .SendMessageToUser(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageAction:Request.Action =  Request.Action.ActionOneOfNotSet
    public private(set) var id:UInt32 = UInt32(0)

    public private(set) var hasId:Bool = false
    public private(set) var signUp:HseMsg.Request.SignUp!{
         get {
              return Request.Action.getSignUp(storageAction)
         }
         set (newvalue) {
              storageAction = Request.Action.SignUp(newvalue)
         }
    }
    public private(set) var hasSignUp:Bool {
          get {
               if Request.Action.getSignUp(storageAction) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var signIn:HseMsg.Request.SignIn!{
         get {
              return Request.Action.getSignIn(storageAction)
         }
         set (newvalue) {
              storageAction = Request.Action.SignIn(newvalue)
         }
    }
    public private(set) var hasSignIn:Bool {
          get {
               if Request.Action.getSignIn(storageAction) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var getUsers:HseMsg.Request.GetUsers!{
         get {
              return Request.Action.getGetUsers(storageAction)
         }
         set (newvalue) {
              storageAction = Request.Action.GetUsers(newvalue)
         }
    }
    public private(set) var hasGetUsers:Bool {
          get {
               if Request.Action.getGetUsers(storageAction) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var getMessagesWithUser:HseMsg.Request.GetMessagesWithUser!{
         get {
              return Request.Action.getGetMessagesWithUser(storageAction)
         }
         set (newvalue) {
              storageAction = Request.Action.GetMessagesWithUser(newvalue)
         }
    }
    public private(set) var hasGetMessagesWithUser:Bool {
          get {
               if Request.Action.getGetMessagesWithUser(storageAction) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var sendMessageToUser:HseMsg.Request.SendMessageToUser!{
         get {
              return Request.Action.getSendMessageToUser(storageAction)
         }
         set (newvalue) {
              storageAction = Request.Action.SendMessageToUser(newvalue)
         }
    }
    public private(set) var hasSendMessageToUser:Bool {
          get {
               if Request.Action.getSendMessageToUser(storageAction) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasId {
        return false
      }
      if hasSignUp {
       if !signUp.isInitialized() {
         return false
       }
      }
      if hasSignIn {
       if !signIn.isInitialized() {
         return false
       }
      }
      if hasGetMessagesWithUser {
       if !getMessagesWithUser.isInitialized() {
         return false
       }
      }
      if hasSendMessageToUser {
       if !sendMessageToUser.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeUInt32(1, value:id)
      }
      if hasSignUp {
        try output.writeMessage(2, value:signUp)
      }
      if hasSignIn {
        try output.writeMessage(3, value:signIn)
      }
      if hasGetUsers {
        try output.writeMessage(4, value:getUsers)
      }
      if hasGetMessagesWithUser {
        try output.writeMessage(5, value:getMessagesWithUser)
      }
      if hasSendMessageToUser {
        try output.writeMessage(6, value:sendMessageToUser)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeUInt32Size(1)
      }
      if hasSignUp {
          if let varSizesignUp = signUp?.computeMessageSize(2) {
              serialize_size += varSizesignUp
          }
      }
      if hasSignIn {
          if let varSizesignIn = signIn?.computeMessageSize(3) {
              serialize_size += varSizesignIn
          }
      }
      if hasGetUsers {
          if let varSizegetUsers = getUsers?.computeMessageSize(4) {
              serialize_size += varSizegetUsers
          }
      }
      if hasGetMessagesWithUser {
          if let varSizegetMessagesWithUser = getMessagesWithUser?.computeMessageSize(5) {
              serialize_size += varSizegetMessagesWithUser
          }
      }
      if hasSendMessageToUser {
          if let varSizesendMessageToUser = sendMessageToUser?.computeMessageSize(6) {
              serialize_size += varSizesendMessageToUser
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Request> {
      var mergedArray = Array<HseMsg.Request>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Request? {
      return try HseMsg.Request.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request {
      return try HseMsg.Request.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> HseMsg.Request.Builder {
      return HseMsg.Request.classBuilder() as! HseMsg.Request.Builder
    }
    public func getBuilder() -> HseMsg.Request.Builder {
      return classBuilder() as! HseMsg.Request.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return HseMsg.Request.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return HseMsg.Request.Builder()
    }
    public func toBuilder() throws -> HseMsg.Request.Builder {
      return try HseMsg.Request.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:HseMsg.Request) throws -> HseMsg.Request.Builder {
      return try HseMsg.Request.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSignUp {
        output += "\(indent) signUp {\n"
        if let outDescSignUp = signUp {
          output += try outDescSignUp.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSignIn {
        output += "\(indent) signIn {\n"
        if let outDescSignIn = signIn {
          output += try outDescSignIn.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasGetUsers {
        output += "\(indent) getUsers {\n"
        if let outDescGetUsers = getUsers {
          output += try outDescGetUsers.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasGetMessagesWithUser {
        output += "\(indent) getMessagesWithUser {\n"
        if let outDescGetMessagesWithUser = getMessagesWithUser {
          output += try outDescGetMessagesWithUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSendMessageToUser {
        output += "\(indent) sendMessageToUser {\n"
        if let outDescSendMessageToUser = sendMessageToUser {
          output += try outDescSendMessageToUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSignUp {
                if let hashValuesignUp = signUp?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesignUp
                }
            }
            if hasSignIn {
                if let hashValuesignIn = signIn?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesignIn
                }
            }
            if hasGetUsers {
                if let hashValuegetUsers = getUsers?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegetUsers
                }
            }
            if hasGetMessagesWithUser {
                if let hashValuegetMessagesWithUser = getMessagesWithUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegetMessagesWithUser
                }
            }
            if hasSendMessageToUser {
                if let hashValuesendMessageToUser = sendMessageToUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesendMessageToUser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "HseMsg.Request"
    }
    override public func className() -> String {
        return "HseMsg.Request"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return HseMsg.Request.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:HseMsg.Request = HseMsg.Request()
      public func getMessage() -> HseMsg.Request {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:UInt32 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:UInt32) -> HseMsg.Request.Builder {
        self.id = value
        return self
      }
      public func clearId() -> HseMsg.Request.Builder{
           builderResult.hasId = false
           builderResult.id = UInt32(0)
           return self
      }
      public var hasSignUp:Bool {
           get {
               return builderResult.hasSignUp
           }
      }
      public var signUp:HseMsg.Request.SignUp! {
           get {
               if signUpBuilder_ != nil {
                  builderResult.signUp = signUpBuilder_.getMessage()
               }
               return builderResult.signUp
           }
           set (value) {
               builderResult.hasSignUp = true
               builderResult.signUp = value
           }
      }
      private var signUpBuilder_:HseMsg.Request.SignUp.Builder! {
           didSet {
              builderResult.hasSignUp = true
           }
      }
      public func getSignUpBuilder() -> HseMsg.Request.SignUp.Builder {
        if signUpBuilder_ == nil {
           signUpBuilder_ = HseMsg.Request.SignUp.Builder()
           builderResult.signUp = signUpBuilder_.getMessage()
           if signUp != nil {
              try! signUpBuilder_.mergeFrom(signUp)
           }
        }
        return signUpBuilder_
      }
      public func setSignUp(value:HseMsg.Request.SignUp!) -> HseMsg.Request.Builder {
        self.signUp = value
        return self
      }
      public func mergeSignUp(value:HseMsg.Request.SignUp) throws -> HseMsg.Request.Builder {
        if builderResult.hasSignUp {
          builderResult.signUp = try HseMsg.Request.SignUp.builderWithPrototype(builderResult.signUp).mergeFrom(value).buildPartial()
        } else {
          builderResult.signUp = value
        }
        builderResult.hasSignUp = true
        return self
      }
      public func clearSignUp() -> HseMsg.Request.Builder {
        signUpBuilder_ = nil
        builderResult.hasSignUp = false
        builderResult.signUp = nil
        return self
      }
      public var hasSignIn:Bool {
           get {
               return builderResult.hasSignIn
           }
      }
      public var signIn:HseMsg.Request.SignIn! {
           get {
               if signInBuilder_ != nil {
                  builderResult.signIn = signInBuilder_.getMessage()
               }
               return builderResult.signIn
           }
           set (value) {
               builderResult.hasSignIn = true
               builderResult.signIn = value
           }
      }
      private var signInBuilder_:HseMsg.Request.SignIn.Builder! {
           didSet {
              builderResult.hasSignIn = true
           }
      }
      public func getSignInBuilder() -> HseMsg.Request.SignIn.Builder {
        if signInBuilder_ == nil {
           signInBuilder_ = HseMsg.Request.SignIn.Builder()
           builderResult.signIn = signInBuilder_.getMessage()
           if signIn != nil {
              try! signInBuilder_.mergeFrom(signIn)
           }
        }
        return signInBuilder_
      }
      public func setSignIn(value:HseMsg.Request.SignIn!) -> HseMsg.Request.Builder {
        self.signIn = value
        return self
      }
      public func mergeSignIn(value:HseMsg.Request.SignIn) throws -> HseMsg.Request.Builder {
        if builderResult.hasSignIn {
          builderResult.signIn = try HseMsg.Request.SignIn.builderWithPrototype(builderResult.signIn).mergeFrom(value).buildPartial()
        } else {
          builderResult.signIn = value
        }
        builderResult.hasSignIn = true
        return self
      }
      public func clearSignIn() -> HseMsg.Request.Builder {
        signInBuilder_ = nil
        builderResult.hasSignIn = false
        builderResult.signIn = nil
        return self
      }
      public var hasGetUsers:Bool {
           get {
               return builderResult.hasGetUsers
           }
      }
      public var getUsers:HseMsg.Request.GetUsers! {
           get {
               if getUsersBuilder_ != nil {
                  builderResult.getUsers = getUsersBuilder_.getMessage()
               }
               return builderResult.getUsers
           }
           set (value) {
               builderResult.hasGetUsers = true
               builderResult.getUsers = value
           }
      }
      private var getUsersBuilder_:HseMsg.Request.GetUsers.Builder! {
           didSet {
              builderResult.hasGetUsers = true
           }
      }
      public func getGetUsersBuilder() -> HseMsg.Request.GetUsers.Builder {
        if getUsersBuilder_ == nil {
           getUsersBuilder_ = HseMsg.Request.GetUsers.Builder()
           builderResult.getUsers = getUsersBuilder_.getMessage()
           if getUsers != nil {
              try! getUsersBuilder_.mergeFrom(getUsers)
           }
        }
        return getUsersBuilder_
      }
      public func setGetUsers(value:HseMsg.Request.GetUsers!) -> HseMsg.Request.Builder {
        self.getUsers = value
        return self
      }
      public func mergeGetUsers(value:HseMsg.Request.GetUsers) throws -> HseMsg.Request.Builder {
        if builderResult.hasGetUsers {
          builderResult.getUsers = try HseMsg.Request.GetUsers.builderWithPrototype(builderResult.getUsers).mergeFrom(value).buildPartial()
        } else {
          builderResult.getUsers = value
        }
        builderResult.hasGetUsers = true
        return self
      }
      public func clearGetUsers() -> HseMsg.Request.Builder {
        getUsersBuilder_ = nil
        builderResult.hasGetUsers = false
        builderResult.getUsers = nil
        return self
      }
      public var hasGetMessagesWithUser:Bool {
           get {
               return builderResult.hasGetMessagesWithUser
           }
      }
      public var getMessagesWithUser:HseMsg.Request.GetMessagesWithUser! {
           get {
               if getMessagesWithUserBuilder_ != nil {
                  builderResult.getMessagesWithUser = getMessagesWithUserBuilder_.getMessage()
               }
               return builderResult.getMessagesWithUser
           }
           set (value) {
               builderResult.hasGetMessagesWithUser = true
               builderResult.getMessagesWithUser = value
           }
      }
      private var getMessagesWithUserBuilder_:HseMsg.Request.GetMessagesWithUser.Builder! {
           didSet {
              builderResult.hasGetMessagesWithUser = true
           }
      }
      public func getGetMessagesWithUserBuilder() -> HseMsg.Request.GetMessagesWithUser.Builder {
        if getMessagesWithUserBuilder_ == nil {
           getMessagesWithUserBuilder_ = HseMsg.Request.GetMessagesWithUser.Builder()
           builderResult.getMessagesWithUser = getMessagesWithUserBuilder_.getMessage()
           if getMessagesWithUser != nil {
              try! getMessagesWithUserBuilder_.mergeFrom(getMessagesWithUser)
           }
        }
        return getMessagesWithUserBuilder_
      }
      public func setGetMessagesWithUser(value:HseMsg.Request.GetMessagesWithUser!) -> HseMsg.Request.Builder {
        self.getMessagesWithUser = value
        return self
      }
      public func mergeGetMessagesWithUser(value:HseMsg.Request.GetMessagesWithUser) throws -> HseMsg.Request.Builder {
        if builderResult.hasGetMessagesWithUser {
          builderResult.getMessagesWithUser = try HseMsg.Request.GetMessagesWithUser.builderWithPrototype(builderResult.getMessagesWithUser).mergeFrom(value).buildPartial()
        } else {
          builderResult.getMessagesWithUser = value
        }
        builderResult.hasGetMessagesWithUser = true
        return self
      }
      public func clearGetMessagesWithUser() -> HseMsg.Request.Builder {
        getMessagesWithUserBuilder_ = nil
        builderResult.hasGetMessagesWithUser = false
        builderResult.getMessagesWithUser = nil
        return self
      }
      public var hasSendMessageToUser:Bool {
           get {
               return builderResult.hasSendMessageToUser
           }
      }
      public var sendMessageToUser:HseMsg.Request.SendMessageToUser! {
           get {
               if sendMessageToUserBuilder_ != nil {
                  builderResult.sendMessageToUser = sendMessageToUserBuilder_.getMessage()
               }
               return builderResult.sendMessageToUser
           }
           set (value) {
               builderResult.hasSendMessageToUser = true
               builderResult.sendMessageToUser = value
           }
      }
      private var sendMessageToUserBuilder_:HseMsg.Request.SendMessageToUser.Builder! {
           didSet {
              builderResult.hasSendMessageToUser = true
           }
      }
      public func getSendMessageToUserBuilder() -> HseMsg.Request.SendMessageToUser.Builder {
        if sendMessageToUserBuilder_ == nil {
           sendMessageToUserBuilder_ = HseMsg.Request.SendMessageToUser.Builder()
           builderResult.sendMessageToUser = sendMessageToUserBuilder_.getMessage()
           if sendMessageToUser != nil {
              try! sendMessageToUserBuilder_.mergeFrom(sendMessageToUser)
           }
        }
        return sendMessageToUserBuilder_
      }
      public func setSendMessageToUser(value:HseMsg.Request.SendMessageToUser!) -> HseMsg.Request.Builder {
        self.sendMessageToUser = value
        return self
      }
      public func mergeSendMessageToUser(value:HseMsg.Request.SendMessageToUser) throws -> HseMsg.Request.Builder {
        if builderResult.hasSendMessageToUser {
          builderResult.sendMessageToUser = try HseMsg.Request.SendMessageToUser.builderWithPrototype(builderResult.sendMessageToUser).mergeFrom(value).buildPartial()
        } else {
          builderResult.sendMessageToUser = value
        }
        builderResult.hasSendMessageToUser = true
        return self
      }
      public func clearSendMessageToUser() -> HseMsg.Request.Builder {
        sendMessageToUserBuilder_ = nil
        builderResult.hasSendMessageToUser = false
        builderResult.sendMessageToUser = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> HseMsg.Request.Builder {
        builderResult = HseMsg.Request()
        return self
      }
      public override func clone() throws -> HseMsg.Request.Builder {
        return try HseMsg.Request.builderWithPrototype(builderResult)
      }
      public override func build() throws -> HseMsg.Request {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> HseMsg.Request {
        let returnMe:HseMsg.Request = builderResult
        return returnMe
      }
      public func mergeFrom(other:HseMsg.Request) throws -> HseMsg.Request.Builder {
        if other == HseMsg.Request() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if (other.hasSignUp) {
            try mergeSignUp(other.signUp)
        }
        if (other.hasSignIn) {
            try mergeSignIn(other.signIn)
        }
        if (other.hasGetUsers) {
            try mergeGetUsers(other.getUsers)
        }
        if (other.hasGetMessagesWithUser) {
            try mergeGetMessagesWithUser(other.getMessagesWithUser)
        }
        if (other.hasSendMessageToUser) {
            try mergeSendMessageToUser(other.sendMessageToUser)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Request.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Request.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readUInt32()

          case 18 :
            let subBuilder:HseMsg.Request.SignUp.Builder = HseMsg.Request.SignUp.Builder()
            if hasSignUp {
              try subBuilder.mergeFrom(signUp)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            signUp = subBuilder.buildPartial()

          case 26 :
            let subBuilder:HseMsg.Request.SignIn.Builder = HseMsg.Request.SignIn.Builder()
            if hasSignIn {
              try subBuilder.mergeFrom(signIn)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            signIn = subBuilder.buildPartial()

          case 34 :
            let subBuilder:HseMsg.Request.GetUsers.Builder = HseMsg.Request.GetUsers.Builder()
            if hasGetUsers {
              try subBuilder.mergeFrom(getUsers)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            getUsers = subBuilder.buildPartial()

          case 42 :
            let subBuilder:HseMsg.Request.GetMessagesWithUser.Builder = HseMsg.Request.GetMessagesWithUser.Builder()
            if hasGetMessagesWithUser {
              try subBuilder.mergeFrom(getMessagesWithUser)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            getMessagesWithUser = subBuilder.buildPartial()

          case 50 :
            let subBuilder:HseMsg.Request.SendMessageToUser.Builder = HseMsg.Request.SendMessageToUser.Builder()
            if hasSendMessageToUser {
              try subBuilder.mergeFrom(sendMessageToUser)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sendMessageToUser = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Result : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class SignUpResult : GeneratedMessage, GeneratedMessageProtocol {


          //Enum type declaration start 

          public enum SignUpResultStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible {
            case SignedUp = 1
            case UsernameIsTaken = 2
            case ValidationError = 3

            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                    case .SignedUp: return ".SignedUp"
                    case .UsernameIsTaken: return ".UsernameIsTaken"
                    case .ValidationError: return ".ValidationError"
                }
            }
          }

          //Enum type declaration end 

        public private(set) var status:HseMsg.Result.SignUpResult.SignUpResultStatus = HseMsg.Result.SignUpResult.SignUpResultStatus.SignedUp
        public private(set) var hasStatus:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasStatus {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasStatus {
            try output.writeEnum(1, value:status.rawValue)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if (hasStatus) {
            serialize_size += status.rawValue.computeEnumSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result.SignUpResult> {
          var mergedArray = Array<HseMsg.Result.SignUpResult>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SignUpResult? {
          return try HseMsg.Result.SignUpResult.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignUpResult {
          return try HseMsg.Result.SignUpResult.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Result.SignUpResult.Builder {
          return HseMsg.Result.SignUpResult.classBuilder() as! HseMsg.Result.SignUpResult.Builder
        }
        public func getBuilder() -> HseMsg.Result.SignUpResult.Builder {
          return classBuilder() as! HseMsg.Result.SignUpResult.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SignUpResult.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SignUpResult.Builder()
        }
        public func toBuilder() throws -> HseMsg.Result.SignUpResult.Builder {
          return try HseMsg.Result.SignUpResult.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Result.SignUpResult) throws -> HseMsg.Result.SignUpResult.Builder {
          return try HseMsg.Result.SignUpResult.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if (hasStatus) {
            output += "\(indent) status: \(status.description)\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ Int(status.rawValue)
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Result.SignUpResult"
        }
        override public func className() -> String {
            return "HseMsg.Result.SignUpResult"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Result.SignUpResult.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Result.SignUpResult = HseMsg.Result.SignUpResult()
          public func getMessage() -> HseMsg.Result.SignUpResult {
              return builderResult
          }

          required override public init () {
             super.init()
          }
            public var hasStatus:Bool{
                get {
                    return builderResult.hasStatus
                }
            }
            public var status:HseMsg.Result.SignUpResult.SignUpResultStatus {
                get {
                    return builderResult.status
                }
                set (value) {
                    builderResult.hasStatus = true
                    builderResult.status = value
                }
            }
            public func setStatus(value:HseMsg.Result.SignUpResult.SignUpResultStatus) -> HseMsg.Result.SignUpResult.Builder {
              self.status = value
              return self
            }
            public func clearStatus() -> HseMsg.Result.SignUpResult.Builder {
               builderResult.hasStatus = false
               builderResult.status = .SignedUp
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Result.SignUpResult.Builder {
            builderResult = HseMsg.Result.SignUpResult()
            return self
          }
          public override func clone() throws -> HseMsg.Result.SignUpResult.Builder {
            return try HseMsg.Result.SignUpResult.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Result.SignUpResult {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Result.SignUpResult {
            let returnMe:HseMsg.Result.SignUpResult = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Result.SignUpResult) throws -> HseMsg.Result.SignUpResult.Builder {
            if other == HseMsg.Result.SignUpResult() {
             return self
            }
            if other.hasStatus {
                 status = other.status
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SignUpResult.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignUpResult.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntstatus = try input.readEnum()
                if let enumsstatus = HseMsg.Result.SignUpResult.SignUpResultStatus(rawValue:valueIntstatus){
                     status = enumsstatus
                } else {
                     try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntstatus))
                }

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class SignInResult : GeneratedMessage, GeneratedMessageProtocol {


          //Enum type declaration start 

          public enum SignInResultStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible {
            case SignedIn = 1
            case UserNotFound = 2

            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                    case .SignedIn: return ".SignedIn"
                    case .UserNotFound: return ".UserNotFound"
                }
            }
          }

          //Enum type declaration end 

        public private(set) var status:HseMsg.Result.SignInResult.SignInResultStatus = HseMsg.Result.SignInResult.SignInResultStatus.SignedIn
        public private(set) var hasStatus:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasStatus {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasStatus {
            try output.writeEnum(1, value:status.rawValue)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if (hasStatus) {
            serialize_size += status.rawValue.computeEnumSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result.SignInResult> {
          var mergedArray = Array<HseMsg.Result.SignInResult>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SignInResult? {
          return try HseMsg.Result.SignInResult.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignInResult {
          return try HseMsg.Result.SignInResult.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Result.SignInResult.Builder {
          return HseMsg.Result.SignInResult.classBuilder() as! HseMsg.Result.SignInResult.Builder
        }
        public func getBuilder() -> HseMsg.Result.SignInResult.Builder {
          return classBuilder() as! HseMsg.Result.SignInResult.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SignInResult.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SignInResult.Builder()
        }
        public func toBuilder() throws -> HseMsg.Result.SignInResult.Builder {
          return try HseMsg.Result.SignInResult.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Result.SignInResult) throws -> HseMsg.Result.SignInResult.Builder {
          return try HseMsg.Result.SignInResult.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if (hasStatus) {
            output += "\(indent) status: \(status.description)\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ Int(status.rawValue)
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Result.SignInResult"
        }
        override public func className() -> String {
            return "HseMsg.Result.SignInResult"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Result.SignInResult.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Result.SignInResult = HseMsg.Result.SignInResult()
          public func getMessage() -> HseMsg.Result.SignInResult {
              return builderResult
          }

          required override public init () {
             super.init()
          }
            public var hasStatus:Bool{
                get {
                    return builderResult.hasStatus
                }
            }
            public var status:HseMsg.Result.SignInResult.SignInResultStatus {
                get {
                    return builderResult.status
                }
                set (value) {
                    builderResult.hasStatus = true
                    builderResult.status = value
                }
            }
            public func setStatus(value:HseMsg.Result.SignInResult.SignInResultStatus) -> HseMsg.Result.SignInResult.Builder {
              self.status = value
              return self
            }
            public func clearStatus() -> HseMsg.Result.SignInResult.Builder {
               builderResult.hasStatus = false
               builderResult.status = .SignedIn
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Result.SignInResult.Builder {
            builderResult = HseMsg.Result.SignInResult()
            return self
          }
          public override func clone() throws -> HseMsg.Result.SignInResult.Builder {
            return try HseMsg.Result.SignInResult.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Result.SignInResult {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Result.SignInResult {
            let returnMe:HseMsg.Result.SignInResult = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Result.SignInResult) throws -> HseMsg.Result.SignInResult.Builder {
            if other == HseMsg.Result.SignInResult() {
             return self
            }
            if other.hasStatus {
                 status = other.status
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SignInResult.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SignInResult.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntstatus = try input.readEnum()
                if let enumsstatus = HseMsg.Result.SignInResult.SignInResultStatus(rawValue:valueIntstatus){
                     status = enumsstatus
                } else {
                     try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntstatus))
                }

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class GetUsersResult : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var users:Array<HseMsg.User>  = Array<HseMsg.User>()
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          var isInitusers:Bool = true
          for oneElementusers in users {
              if (!oneElementusers.isInitialized()) {
                  isInitusers = false
                  break 
              }
          }
          if !isInitusers {
           return isInitusers
           }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          for oneElementusers in users {
              try output.writeMessage(1, value:oneElementusers)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementusers in users {
              serialize_size += oneElementusers.computeMessageSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result.GetUsersResult> {
          var mergedArray = Array<HseMsg.Result.GetUsersResult>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result.GetUsersResult? {
          return try HseMsg.Result.GetUsersResult.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetUsersResult {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Result.GetUsersResult.Builder {
          return HseMsg.Result.GetUsersResult.classBuilder() as! HseMsg.Result.GetUsersResult.Builder
        }
        public func getBuilder() -> HseMsg.Result.GetUsersResult.Builder {
          return classBuilder() as! HseMsg.Result.GetUsersResult.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Result.GetUsersResult.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Result.GetUsersResult.Builder()
        }
        public func toBuilder() throws -> HseMsg.Result.GetUsersResult.Builder {
          return try HseMsg.Result.GetUsersResult.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Result.GetUsersResult) throws -> HseMsg.Result.GetUsersResult.Builder {
          return try HseMsg.Result.GetUsersResult.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          var usersElementIndex:Int = 0
          for oneElementusers in users {
              output += "\(indent) users[\(usersElementIndex)] {\n"
              output += try oneElementusers.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              usersElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementusers in users {
                    hashCode = (hashCode &* 31) &+ oneElementusers.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Result.GetUsersResult"
        }
        override public func className() -> String {
            return "HseMsg.Result.GetUsersResult"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Result.GetUsersResult.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Result.GetUsersResult = HseMsg.Result.GetUsersResult()
          public func getMessage() -> HseMsg.Result.GetUsersResult {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var users:Array<HseMsg.User> {
               get {
                   return builderResult.users
               }
               set (value) {
                   builderResult.users = value
               }
          }
          public func setUsers(value:Array<HseMsg.User>) -> HseMsg.Result.GetUsersResult.Builder {
            self.users = value
            return self
          }
          public func clearUsers() -> HseMsg.Result.GetUsersResult.Builder {
            builderResult.users.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Result.GetUsersResult.Builder {
            builderResult = HseMsg.Result.GetUsersResult()
            return self
          }
          public override func clone() throws -> HseMsg.Result.GetUsersResult.Builder {
            return try HseMsg.Result.GetUsersResult.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Result.GetUsersResult {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Result.GetUsersResult {
            let returnMe:HseMsg.Result.GetUsersResult = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Result.GetUsersResult) throws -> HseMsg.Result.GetUsersResult.Builder {
            if other == HseMsg.Result.GetUsersResult() {
             return self
            }
            if !other.users.isEmpty  {
               builderResult.users += other.users
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.GetUsersResult.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetUsersResult.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = HseMsg.User.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                users += [subBuilder.buildPartial()]

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class GetMessagesWithUserResult : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var messages:Array<HseMsg.Message_>  = Array<HseMsg.Message_>()
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          var isInitmessages:Bool = true
          for oneElementmessages in messages {
              if (!oneElementmessages.isInitialized()) {
                  isInitmessages = false
                  break 
              }
          }
          if !isInitmessages {
           return isInitmessages
           }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          for oneElementmessages in messages {
              try output.writeMessage(1, value:oneElementmessages)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementmessages in messages {
              serialize_size += oneElementmessages.computeMessageSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result.GetMessagesWithUserResult> {
          var mergedArray = Array<HseMsg.Result.GetMessagesWithUserResult>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result.GetMessagesWithUserResult? {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetMessagesWithUserResult {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Result.GetMessagesWithUserResult.Builder {
          return HseMsg.Result.GetMessagesWithUserResult.classBuilder() as! HseMsg.Result.GetMessagesWithUserResult.Builder
        }
        public func getBuilder() -> HseMsg.Result.GetMessagesWithUserResult.Builder {
          return classBuilder() as! HseMsg.Result.GetMessagesWithUserResult.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Result.GetMessagesWithUserResult.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Result.GetMessagesWithUserResult.Builder()
        }
        public func toBuilder() throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
          return try HseMsg.Result.GetMessagesWithUserResult.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Result.GetMessagesWithUserResult) throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
          return try HseMsg.Result.GetMessagesWithUserResult.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          var messagesElementIndex:Int = 0
          for oneElementmessages in messages {
              output += "\(indent) messages[\(messagesElementIndex)] {\n"
              output += try oneElementmessages.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              messagesElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementmessages in messages {
                    hashCode = (hashCode &* 31) &+ oneElementmessages.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Result.GetMessagesWithUserResult"
        }
        override public func className() -> String {
            return "HseMsg.Result.GetMessagesWithUserResult"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Result.GetMessagesWithUserResult.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Result.GetMessagesWithUserResult = HseMsg.Result.GetMessagesWithUserResult()
          public func getMessage() -> HseMsg.Result.GetMessagesWithUserResult {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var messages:Array<HseMsg.Message_> {
               get {
                   return builderResult.messages
               }
               set (value) {
                   builderResult.messages = value
               }
          }
          public func setMessages(value:Array<HseMsg.Message_>) -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            self.messages = value
            return self
          }
          public func clearMessages() -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            builderResult.messages.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            builderResult = HseMsg.Result.GetMessagesWithUserResult()
            return self
          }
          public override func clone() throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            return try HseMsg.Result.GetMessagesWithUserResult.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Result.GetMessagesWithUserResult {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Result.GetMessagesWithUserResult {
            let returnMe:HseMsg.Result.GetMessagesWithUserResult = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Result.GetMessagesWithUserResult) throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            if other == HseMsg.Result.GetMessagesWithUserResult() {
             return self
            }
            if !other.messages.isEmpty  {
               builderResult.messages += other.messages
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.GetMessagesWithUserResult.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = HseMsg.Message_.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                messages += [subBuilder.buildPartial()]

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class SendMessageToUserResult : GeneratedMessage, GeneratedMessageProtocol {


          //Enum type declaration start 

          public enum SendMessageToUserResultStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible {
            case Sent = 1
            case UserNotFound = 2
            case EmptyMessage = 3

            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                    case .Sent: return ".Sent"
                    case .UserNotFound: return ".UserNotFound"
                    case .EmptyMessage: return ".EmptyMessage"
                }
            }
          }

          //Enum type declaration end 

        public private(set) var status:HseMsg.Result.SendMessageToUserResult.SendMessageToUserResultStatus = HseMsg.Result.SendMessageToUserResult.SendMessageToUserResultStatus.Sent
        public private(set) var hasStatus:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasStatus {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasStatus {
            try output.writeEnum(1, value:status.rawValue)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if (hasStatus) {
            serialize_size += status.rawValue.computeEnumSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result.SendMessageToUserResult> {
          var mergedArray = Array<HseMsg.Result.SendMessageToUserResult>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SendMessageToUserResult? {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SendMessageToUserResult {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.Result.SendMessageToUserResult.Builder {
          return HseMsg.Result.SendMessageToUserResult.classBuilder() as! HseMsg.Result.SendMessageToUserResult.Builder
        }
        public func getBuilder() -> HseMsg.Result.SendMessageToUserResult.Builder {
          return classBuilder() as! HseMsg.Result.SendMessageToUserResult.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SendMessageToUserResult.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.Result.SendMessageToUserResult.Builder()
        }
        public func toBuilder() throws -> HseMsg.Result.SendMessageToUserResult.Builder {
          return try HseMsg.Result.SendMessageToUserResult.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.Result.SendMessageToUserResult) throws -> HseMsg.Result.SendMessageToUserResult.Builder {
          return try HseMsg.Result.SendMessageToUserResult.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if (hasStatus) {
            output += "\(indent) status: \(status.description)\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ Int(status.rawValue)
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.Result.SendMessageToUserResult"
        }
        override public func className() -> String {
            return "HseMsg.Result.SendMessageToUserResult"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.Result.SendMessageToUserResult.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.Result.SendMessageToUserResult = HseMsg.Result.SendMessageToUserResult()
          public func getMessage() -> HseMsg.Result.SendMessageToUserResult {
              return builderResult
          }

          required override public init () {
             super.init()
          }
            public var hasStatus:Bool{
                get {
                    return builderResult.hasStatus
                }
            }
            public var status:HseMsg.Result.SendMessageToUserResult.SendMessageToUserResultStatus {
                get {
                    return builderResult.status
                }
                set (value) {
                    builderResult.hasStatus = true
                    builderResult.status = value
                }
            }
            public func setStatus(value:HseMsg.Result.SendMessageToUserResult.SendMessageToUserResultStatus) -> HseMsg.Result.SendMessageToUserResult.Builder {
              self.status = value
              return self
            }
            public func clearStatus() -> HseMsg.Result.SendMessageToUserResult.Builder {
               builderResult.hasStatus = false
               builderResult.status = .Sent
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.Result.SendMessageToUserResult.Builder {
            builderResult = HseMsg.Result.SendMessageToUserResult()
            return self
          }
          public override func clone() throws -> HseMsg.Result.SendMessageToUserResult.Builder {
            return try HseMsg.Result.SendMessageToUserResult.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.Result.SendMessageToUserResult {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.Result.SendMessageToUserResult {
            let returnMe:HseMsg.Result.SendMessageToUserResult = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.Result.SendMessageToUserResult) throws -> HseMsg.Result.SendMessageToUserResult.Builder {
            if other == HseMsg.Result.SendMessageToUserResult() {
             return self
            }
            if other.hasStatus {
                 status = other.status
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.SendMessageToUserResult.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.SendMessageToUserResult.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntstatus = try input.readEnum()
                if let enumsstatus = HseMsg.Result.SendMessageToUserResult.SendMessageToUserResultStatus(rawValue:valueIntstatus){
                     status = enumsstatus
                } else {
                     try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntstatus))
                }

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Value {
      case ValueOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .ValueOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case SignUp(HseMsg.Result.SignUpResult)

      public static func getSignUp(value:Value) -> HseMsg.Result.SignUpResult? {
           switch value {
           case .SignUp(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SignIn(HseMsg.Result.SignInResult)

      public static func getSignIn(value:Value) -> HseMsg.Result.SignInResult? {
           switch value {
           case .SignIn(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case GetUsers(HseMsg.Result.GetUsersResult)

      public static func getGetUsers(value:Value) -> HseMsg.Result.GetUsersResult? {
           switch value {
           case .GetUsers(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case GetMessagesWithUser(HseMsg.Result.GetMessagesWithUserResult)

      public static func getGetMessagesWithUser(value:Value) -> HseMsg.Result.GetMessagesWithUserResult? {
           switch value {
           case .GetMessagesWithUser(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SendMessageToUser(HseMsg.Result.SendMessageToUserResult)

      public static func getSendMessageToUser(value:Value) -> HseMsg.Result.SendMessageToUserResult? {
           switch value {
           case .SendMessageToUser(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageValue:Result.Value =  Result.Value.ValueOneOfNotSet
    public private(set) var id:UInt32 = UInt32(0)

    public private(set) var hasId:Bool = false
    public private(set) var signUp:HseMsg.Result.SignUpResult!{
         get {
              return Result.Value.getSignUp(storageValue)
         }
         set (newvalue) {
              storageValue = Result.Value.SignUp(newvalue)
         }
    }
    public private(set) var hasSignUp:Bool {
          get {
               if Result.Value.getSignUp(storageValue) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var signIn:HseMsg.Result.SignInResult!{
         get {
              return Result.Value.getSignIn(storageValue)
         }
         set (newvalue) {
              storageValue = Result.Value.SignIn(newvalue)
         }
    }
    public private(set) var hasSignIn:Bool {
          get {
               if Result.Value.getSignIn(storageValue) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var getUsers:HseMsg.Result.GetUsersResult!{
         get {
              return Result.Value.getGetUsers(storageValue)
         }
         set (newvalue) {
              storageValue = Result.Value.GetUsers(newvalue)
         }
    }
    public private(set) var hasGetUsers:Bool {
          get {
               if Result.Value.getGetUsers(storageValue) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var getMessagesWithUser:HseMsg.Result.GetMessagesWithUserResult!{
         get {
              return Result.Value.getGetMessagesWithUser(storageValue)
         }
         set (newvalue) {
              storageValue = Result.Value.GetMessagesWithUser(newvalue)
         }
    }
    public private(set) var hasGetMessagesWithUser:Bool {
          get {
               if Result.Value.getGetMessagesWithUser(storageValue) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var sendMessageToUser:HseMsg.Result.SendMessageToUserResult!{
         get {
              return Result.Value.getSendMessageToUser(storageValue)
         }
         set (newvalue) {
              storageValue = Result.Value.SendMessageToUser(newvalue)
         }
    }
    public private(set) var hasSendMessageToUser:Bool {
          get {
               if Result.Value.getSendMessageToUser(storageValue) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasId {
        return false
      }
      if hasSignUp {
       if !signUp.isInitialized() {
         return false
       }
      }
      if hasSignIn {
       if !signIn.isInitialized() {
         return false
       }
      }
      if hasGetUsers {
       if !getUsers.isInitialized() {
         return false
       }
      }
      if hasGetMessagesWithUser {
       if !getMessagesWithUser.isInitialized() {
         return false
       }
      }
      if hasSendMessageToUser {
       if !sendMessageToUser.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeUInt32(1, value:id)
      }
      if hasSignUp {
        try output.writeMessage(2, value:signUp)
      }
      if hasSignIn {
        try output.writeMessage(3, value:signIn)
      }
      if hasGetUsers {
        try output.writeMessage(4, value:getUsers)
      }
      if hasGetMessagesWithUser {
        try output.writeMessage(5, value:getMessagesWithUser)
      }
      if hasSendMessageToUser {
        try output.writeMessage(6, value:sendMessageToUser)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeUInt32Size(1)
      }
      if hasSignUp {
          if let varSizesignUp = signUp?.computeMessageSize(2) {
              serialize_size += varSizesignUp
          }
      }
      if hasSignIn {
          if let varSizesignIn = signIn?.computeMessageSize(3) {
              serialize_size += varSizesignIn
          }
      }
      if hasGetUsers {
          if let varSizegetUsers = getUsers?.computeMessageSize(4) {
              serialize_size += varSizegetUsers
          }
      }
      if hasGetMessagesWithUser {
          if let varSizegetMessagesWithUser = getMessagesWithUser?.computeMessageSize(5) {
              serialize_size += varSizegetMessagesWithUser
          }
      }
      if hasSendMessageToUser {
          if let varSizesendMessageToUser = sendMessageToUser?.computeMessageSize(6) {
              serialize_size += varSizesendMessageToUser
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.Result> {
      var mergedArray = Array<HseMsg.Result>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.Result? {
      return try HseMsg.Result.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result {
      return try HseMsg.Result.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> HseMsg.Result.Builder {
      return HseMsg.Result.classBuilder() as! HseMsg.Result.Builder
    }
    public func getBuilder() -> HseMsg.Result.Builder {
      return classBuilder() as! HseMsg.Result.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return HseMsg.Result.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return HseMsg.Result.Builder()
    }
    public func toBuilder() throws -> HseMsg.Result.Builder {
      return try HseMsg.Result.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:HseMsg.Result) throws -> HseMsg.Result.Builder {
      return try HseMsg.Result.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSignUp {
        output += "\(indent) signUp {\n"
        if let outDescSignUp = signUp {
          output += try outDescSignUp.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSignIn {
        output += "\(indent) signIn {\n"
        if let outDescSignIn = signIn {
          output += try outDescSignIn.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasGetUsers {
        output += "\(indent) getUsers {\n"
        if let outDescGetUsers = getUsers {
          output += try outDescGetUsers.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasGetMessagesWithUser {
        output += "\(indent) getMessagesWithUser {\n"
        if let outDescGetMessagesWithUser = getMessagesWithUser {
          output += try outDescGetMessagesWithUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSendMessageToUser {
        output += "\(indent) sendMessageToUser {\n"
        if let outDescSendMessageToUser = sendMessageToUser {
          output += try outDescSendMessageToUser.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSignUp {
                if let hashValuesignUp = signUp?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesignUp
                }
            }
            if hasSignIn {
                if let hashValuesignIn = signIn?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesignIn
                }
            }
            if hasGetUsers {
                if let hashValuegetUsers = getUsers?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegetUsers
                }
            }
            if hasGetMessagesWithUser {
                if let hashValuegetMessagesWithUser = getMessagesWithUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegetMessagesWithUser
                }
            }
            if hasSendMessageToUser {
                if let hashValuesendMessageToUser = sendMessageToUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesendMessageToUser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "HseMsg.Result"
    }
    override public func className() -> String {
        return "HseMsg.Result"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return HseMsg.Result.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:HseMsg.Result = HseMsg.Result()
      public func getMessage() -> HseMsg.Result {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:UInt32 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:UInt32) -> HseMsg.Result.Builder {
        self.id = value
        return self
      }
      public func clearId() -> HseMsg.Result.Builder{
           builderResult.hasId = false
           builderResult.id = UInt32(0)
           return self
      }
      public var hasSignUp:Bool {
           get {
               return builderResult.hasSignUp
           }
      }
      public var signUp:HseMsg.Result.SignUpResult! {
           get {
               if signUpBuilder_ != nil {
                  builderResult.signUp = signUpBuilder_.getMessage()
               }
               return builderResult.signUp
           }
           set (value) {
               builderResult.hasSignUp = true
               builderResult.signUp = value
           }
      }
      private var signUpBuilder_:HseMsg.Result.SignUpResult.Builder! {
           didSet {
              builderResult.hasSignUp = true
           }
      }
      public func getSignUpBuilder() -> HseMsg.Result.SignUpResult.Builder {
        if signUpBuilder_ == nil {
           signUpBuilder_ = HseMsg.Result.SignUpResult.Builder()
           builderResult.signUp = signUpBuilder_.getMessage()
           if signUp != nil {
              try! signUpBuilder_.mergeFrom(signUp)
           }
        }
        return signUpBuilder_
      }
      public func setSignUp(value:HseMsg.Result.SignUpResult!) -> HseMsg.Result.Builder {
        self.signUp = value
        return self
      }
      public func mergeSignUp(value:HseMsg.Result.SignUpResult) throws -> HseMsg.Result.Builder {
        if builderResult.hasSignUp {
          builderResult.signUp = try HseMsg.Result.SignUpResult.builderWithPrototype(builderResult.signUp).mergeFrom(value).buildPartial()
        } else {
          builderResult.signUp = value
        }
        builderResult.hasSignUp = true
        return self
      }
      public func clearSignUp() -> HseMsg.Result.Builder {
        signUpBuilder_ = nil
        builderResult.hasSignUp = false
        builderResult.signUp = nil
        return self
      }
      public var hasSignIn:Bool {
           get {
               return builderResult.hasSignIn
           }
      }
      public var signIn:HseMsg.Result.SignInResult! {
           get {
               if signInBuilder_ != nil {
                  builderResult.signIn = signInBuilder_.getMessage()
               }
               return builderResult.signIn
           }
           set (value) {
               builderResult.hasSignIn = true
               builderResult.signIn = value
           }
      }
      private var signInBuilder_:HseMsg.Result.SignInResult.Builder! {
           didSet {
              builderResult.hasSignIn = true
           }
      }
      public func getSignInBuilder() -> HseMsg.Result.SignInResult.Builder {
        if signInBuilder_ == nil {
           signInBuilder_ = HseMsg.Result.SignInResult.Builder()
           builderResult.signIn = signInBuilder_.getMessage()
           if signIn != nil {
              try! signInBuilder_.mergeFrom(signIn)
           }
        }
        return signInBuilder_
      }
      public func setSignIn(value:HseMsg.Result.SignInResult!) -> HseMsg.Result.Builder {
        self.signIn = value
        return self
      }
      public func mergeSignIn(value:HseMsg.Result.SignInResult) throws -> HseMsg.Result.Builder {
        if builderResult.hasSignIn {
          builderResult.signIn = try HseMsg.Result.SignInResult.builderWithPrototype(builderResult.signIn).mergeFrom(value).buildPartial()
        } else {
          builderResult.signIn = value
        }
        builderResult.hasSignIn = true
        return self
      }
      public func clearSignIn() -> HseMsg.Result.Builder {
        signInBuilder_ = nil
        builderResult.hasSignIn = false
        builderResult.signIn = nil
        return self
      }
      public var hasGetUsers:Bool {
           get {
               return builderResult.hasGetUsers
           }
      }
      public var getUsers:HseMsg.Result.GetUsersResult! {
           get {
               if getUsersBuilder_ != nil {
                  builderResult.getUsers = getUsersBuilder_.getMessage()
               }
               return builderResult.getUsers
           }
           set (value) {
               builderResult.hasGetUsers = true
               builderResult.getUsers = value
           }
      }
      private var getUsersBuilder_:HseMsg.Result.GetUsersResult.Builder! {
           didSet {
              builderResult.hasGetUsers = true
           }
      }
      public func getGetUsersBuilder() -> HseMsg.Result.GetUsersResult.Builder {
        if getUsersBuilder_ == nil {
           getUsersBuilder_ = HseMsg.Result.GetUsersResult.Builder()
           builderResult.getUsers = getUsersBuilder_.getMessage()
           if getUsers != nil {
              try! getUsersBuilder_.mergeFrom(getUsers)
           }
        }
        return getUsersBuilder_
      }
      public func setGetUsers(value:HseMsg.Result.GetUsersResult!) -> HseMsg.Result.Builder {
        self.getUsers = value
        return self
      }
      public func mergeGetUsers(value:HseMsg.Result.GetUsersResult) throws -> HseMsg.Result.Builder {
        if builderResult.hasGetUsers {
          builderResult.getUsers = try HseMsg.Result.GetUsersResult.builderWithPrototype(builderResult.getUsers).mergeFrom(value).buildPartial()
        } else {
          builderResult.getUsers = value
        }
        builderResult.hasGetUsers = true
        return self
      }
      public func clearGetUsers() -> HseMsg.Result.Builder {
        getUsersBuilder_ = nil
        builderResult.hasGetUsers = false
        builderResult.getUsers = nil
        return self
      }
      public var hasGetMessagesWithUser:Bool {
           get {
               return builderResult.hasGetMessagesWithUser
           }
      }
      public var getMessagesWithUser:HseMsg.Result.GetMessagesWithUserResult! {
           get {
               if getMessagesWithUserBuilder_ != nil {
                  builderResult.getMessagesWithUser = getMessagesWithUserBuilder_.getMessage()
               }
               return builderResult.getMessagesWithUser
           }
           set (value) {
               builderResult.hasGetMessagesWithUser = true
               builderResult.getMessagesWithUser = value
           }
      }
      private var getMessagesWithUserBuilder_:HseMsg.Result.GetMessagesWithUserResult.Builder! {
           didSet {
              builderResult.hasGetMessagesWithUser = true
           }
      }
      public func getGetMessagesWithUserBuilder() -> HseMsg.Result.GetMessagesWithUserResult.Builder {
        if getMessagesWithUserBuilder_ == nil {
           getMessagesWithUserBuilder_ = HseMsg.Result.GetMessagesWithUserResult.Builder()
           builderResult.getMessagesWithUser = getMessagesWithUserBuilder_.getMessage()
           if getMessagesWithUser != nil {
              try! getMessagesWithUserBuilder_.mergeFrom(getMessagesWithUser)
           }
        }
        return getMessagesWithUserBuilder_
      }
      public func setGetMessagesWithUser(value:HseMsg.Result.GetMessagesWithUserResult!) -> HseMsg.Result.Builder {
        self.getMessagesWithUser = value
        return self
      }
      public func mergeGetMessagesWithUser(value:HseMsg.Result.GetMessagesWithUserResult) throws -> HseMsg.Result.Builder {
        if builderResult.hasGetMessagesWithUser {
          builderResult.getMessagesWithUser = try HseMsg.Result.GetMessagesWithUserResult.builderWithPrototype(builderResult.getMessagesWithUser).mergeFrom(value).buildPartial()
        } else {
          builderResult.getMessagesWithUser = value
        }
        builderResult.hasGetMessagesWithUser = true
        return self
      }
      public func clearGetMessagesWithUser() -> HseMsg.Result.Builder {
        getMessagesWithUserBuilder_ = nil
        builderResult.hasGetMessagesWithUser = false
        builderResult.getMessagesWithUser = nil
        return self
      }
      public var hasSendMessageToUser:Bool {
           get {
               return builderResult.hasSendMessageToUser
           }
      }
      public var sendMessageToUser:HseMsg.Result.SendMessageToUserResult! {
           get {
               if sendMessageToUserBuilder_ != nil {
                  builderResult.sendMessageToUser = sendMessageToUserBuilder_.getMessage()
               }
               return builderResult.sendMessageToUser
           }
           set (value) {
               builderResult.hasSendMessageToUser = true
               builderResult.sendMessageToUser = value
           }
      }
      private var sendMessageToUserBuilder_:HseMsg.Result.SendMessageToUserResult.Builder! {
           didSet {
              builderResult.hasSendMessageToUser = true
           }
      }
      public func getSendMessageToUserBuilder() -> HseMsg.Result.SendMessageToUserResult.Builder {
        if sendMessageToUserBuilder_ == nil {
           sendMessageToUserBuilder_ = HseMsg.Result.SendMessageToUserResult.Builder()
           builderResult.sendMessageToUser = sendMessageToUserBuilder_.getMessage()
           if sendMessageToUser != nil {
              try! sendMessageToUserBuilder_.mergeFrom(sendMessageToUser)
           }
        }
        return sendMessageToUserBuilder_
      }
      public func setSendMessageToUser(value:HseMsg.Result.SendMessageToUserResult!) -> HseMsg.Result.Builder {
        self.sendMessageToUser = value
        return self
      }
      public func mergeSendMessageToUser(value:HseMsg.Result.SendMessageToUserResult) throws -> HseMsg.Result.Builder {
        if builderResult.hasSendMessageToUser {
          builderResult.sendMessageToUser = try HseMsg.Result.SendMessageToUserResult.builderWithPrototype(builderResult.sendMessageToUser).mergeFrom(value).buildPartial()
        } else {
          builderResult.sendMessageToUser = value
        }
        builderResult.hasSendMessageToUser = true
        return self
      }
      public func clearSendMessageToUser() -> HseMsg.Result.Builder {
        sendMessageToUserBuilder_ = nil
        builderResult.hasSendMessageToUser = false
        builderResult.sendMessageToUser = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> HseMsg.Result.Builder {
        builderResult = HseMsg.Result()
        return self
      }
      public override func clone() throws -> HseMsg.Result.Builder {
        return try HseMsg.Result.builderWithPrototype(builderResult)
      }
      public override func build() throws -> HseMsg.Result {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> HseMsg.Result {
        let returnMe:HseMsg.Result = builderResult
        return returnMe
      }
      public func mergeFrom(other:HseMsg.Result) throws -> HseMsg.Result.Builder {
        if other == HseMsg.Result() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if (other.hasSignUp) {
            try mergeSignUp(other.signUp)
        }
        if (other.hasSignIn) {
            try mergeSignIn(other.signIn)
        }
        if (other.hasGetUsers) {
            try mergeGetUsers(other.getUsers)
        }
        if (other.hasGetMessagesWithUser) {
            try mergeGetMessagesWithUser(other.getMessagesWithUser)
        }
        if (other.hasSendMessageToUser) {
            try mergeSendMessageToUser(other.sendMessageToUser)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.Result.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.Result.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readUInt32()

          case 18 :
            let subBuilder:HseMsg.Result.SignUpResult.Builder = HseMsg.Result.SignUpResult.Builder()
            if hasSignUp {
              try subBuilder.mergeFrom(signUp)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            signUp = subBuilder.buildPartial()

          case 26 :
            let subBuilder:HseMsg.Result.SignInResult.Builder = HseMsg.Result.SignInResult.Builder()
            if hasSignIn {
              try subBuilder.mergeFrom(signIn)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            signIn = subBuilder.buildPartial()

          case 34 :
            let subBuilder:HseMsg.Result.GetUsersResult.Builder = HseMsg.Result.GetUsersResult.Builder()
            if hasGetUsers {
              try subBuilder.mergeFrom(getUsers)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            getUsers = subBuilder.buildPartial()

          case 42 :
            let subBuilder:HseMsg.Result.GetMessagesWithUserResult.Builder = HseMsg.Result.GetMessagesWithUserResult.Builder()
            if hasGetMessagesWithUser {
              try subBuilder.mergeFrom(getMessagesWithUser)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            getMessagesWithUser = subBuilder.buildPartial()

          case 50 :
            let subBuilder:HseMsg.Result.SendMessageToUserResult.Builder = HseMsg.Result.SendMessageToUserResult.Builder()
            if hasSendMessageToUser {
              try subBuilder.mergeFrom(sendMessageToUser)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sendMessageToUser = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ServerMessage : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class NewMessage : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var message_:HseMsg.Message_!
        public private(set) var hasMessage_:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasMessage_ {
            return false
          }
          if !message_.isInitialized() {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasMessage_ {
            try output.writeMessage(1, value:message_)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasMessage_ {
              if let varSizemessage_ = message_?.computeMessageSize(1) {
                  serialize_size += varSizemessage_
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.ServerMessage.NewMessage> {
          var mergedArray = Array<HseMsg.ServerMessage.NewMessage>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.NewMessage? {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewMessage {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.ServerMessage.NewMessage.Builder {
          return HseMsg.ServerMessage.NewMessage.classBuilder() as! HseMsg.ServerMessage.NewMessage.Builder
        }
        public func getBuilder() -> HseMsg.ServerMessage.NewMessage.Builder {
          return classBuilder() as! HseMsg.ServerMessage.NewMessage.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.NewMessage.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.NewMessage.Builder()
        }
        public func toBuilder() throws -> HseMsg.ServerMessage.NewMessage.Builder {
          return try HseMsg.ServerMessage.NewMessage.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.ServerMessage.NewMessage) throws -> HseMsg.ServerMessage.NewMessage.Builder {
          return try HseMsg.ServerMessage.NewMessage.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasMessage_ {
            output += "\(indent) message_ {\n"
            if let outDescMessage_ = message_ {
              output += try outDescMessage_.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasMessage_ {
                    if let hashValuemessage_ = message_?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuemessage_
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.ServerMessage.NewMessage"
        }
        override public func className() -> String {
            return "HseMsg.ServerMessage.NewMessage"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.ServerMessage.NewMessage.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.ServerMessage.NewMessage = HseMsg.ServerMessage.NewMessage()
          public func getMessage() -> HseMsg.ServerMessage.NewMessage {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasMessage_:Bool {
               get {
                   return builderResult.hasMessage_
               }
          }
          public var message_:HseMsg.Message_! {
               get {
                   if message_Builder_ != nil {
                      builderResult.message_ = message_Builder_.getMessage()
                   }
                   return builderResult.message_
               }
               set (value) {
                   builderResult.hasMessage_ = true
                   builderResult.message_ = value
               }
          }
          private var message_Builder_:HseMsg.Message_.Builder! {
               didSet {
                  builderResult.hasMessage_ = true
               }
          }
          public func getMessage_Builder() -> HseMsg.Message_.Builder {
            if message_Builder_ == nil {
               message_Builder_ = HseMsg.Message_.Builder()
               builderResult.message_ = message_Builder_.getMessage()
               if message_ != nil {
                  try! message_Builder_.mergeFrom(message_)
               }
            }
            return message_Builder_
          }
          public func setMessage_(value:HseMsg.Message_!) -> HseMsg.ServerMessage.NewMessage.Builder {
            self.message_ = value
            return self
          }
          public func mergeMessage_(value:HseMsg.Message_) throws -> HseMsg.ServerMessage.NewMessage.Builder {
            if builderResult.hasMessage_ {
              builderResult.message_ = try HseMsg.Message_.builderWithPrototype(builderResult.message_).mergeFrom(value).buildPartial()
            } else {
              builderResult.message_ = value
            }
            builderResult.hasMessage_ = true
            return self
          }
          public func clearMessage_() -> HseMsg.ServerMessage.NewMessage.Builder {
            message_Builder_ = nil
            builderResult.hasMessage_ = false
            builderResult.message_ = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.ServerMessage.NewMessage.Builder {
            builderResult = HseMsg.ServerMessage.NewMessage()
            return self
          }
          public override func clone() throws -> HseMsg.ServerMessage.NewMessage.Builder {
            return try HseMsg.ServerMessage.NewMessage.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.ServerMessage.NewMessage {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.ServerMessage.NewMessage {
            let returnMe:HseMsg.ServerMessage.NewMessage = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.ServerMessage.NewMessage) throws -> HseMsg.ServerMessage.NewMessage.Builder {
            if other == HseMsg.ServerMessage.NewMessage() {
             return self
            }
            if (other.hasMessage_) {
                try mergeMessage_(other.message_)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.NewMessage.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder:HseMsg.Message_.Builder = HseMsg.Message_.Builder()
                if hasMessage_ {
                  try subBuilder.mergeFrom(message_)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                message_ = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class NewUser : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var user:HseMsg.User!
        public private(set) var hasUser:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasUser {
            return false
          }
          if !user.isInitialized() {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUser {
            try output.writeMessage(1, value:user)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUser {
              if let varSizeuser = user?.computeMessageSize(1) {
                  serialize_size += varSizeuser
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.ServerMessage.NewUser> {
          var mergedArray = Array<HseMsg.ServerMessage.NewUser>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.NewUser? {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewUser {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.ServerMessage.NewUser.Builder {
          return HseMsg.ServerMessage.NewUser.classBuilder() as! HseMsg.ServerMessage.NewUser.Builder
        }
        public func getBuilder() -> HseMsg.ServerMessage.NewUser.Builder {
          return classBuilder() as! HseMsg.ServerMessage.NewUser.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.NewUser.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.NewUser.Builder()
        }
        public func toBuilder() throws -> HseMsg.ServerMessage.NewUser.Builder {
          return try HseMsg.ServerMessage.NewUser.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.ServerMessage.NewUser) throws -> HseMsg.ServerMessage.NewUser.Builder {
          return try HseMsg.ServerMessage.NewUser.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
              output += try outDescUser.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUser {
                    if let hashValueuser = user?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueuser
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.ServerMessage.NewUser"
        }
        override public func className() -> String {
            return "HseMsg.ServerMessage.NewUser"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.ServerMessage.NewUser.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.ServerMessage.NewUser = HseMsg.ServerMessage.NewUser()
          public func getMessage() -> HseMsg.ServerMessage.NewUser {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:HseMsg.User! {
               get {
                   if userBuilder_ != nil {
                      builderResult.user = userBuilder_.getMessage()
                   }
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          private var userBuilder_:HseMsg.User.Builder! {
               didSet {
                  builderResult.hasUser = true
               }
          }
          public func getUserBuilder() -> HseMsg.User.Builder {
            if userBuilder_ == nil {
               userBuilder_ = HseMsg.User.Builder()
               builderResult.user = userBuilder_.getMessage()
               if user != nil {
                  try! userBuilder_.mergeFrom(user)
               }
            }
            return userBuilder_
          }
          public func setUser(value:HseMsg.User!) -> HseMsg.ServerMessage.NewUser.Builder {
            self.user = value
            return self
          }
          public func mergeUser(value:HseMsg.User) throws -> HseMsg.ServerMessage.NewUser.Builder {
            if builderResult.hasUser {
              builderResult.user = try HseMsg.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> HseMsg.ServerMessage.NewUser.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.ServerMessage.NewUser.Builder {
            builderResult = HseMsg.ServerMessage.NewUser()
            return self
          }
          public override func clone() throws -> HseMsg.ServerMessage.NewUser.Builder {
            return try HseMsg.ServerMessage.NewUser.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.ServerMessage.NewUser {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.ServerMessage.NewUser {
            let returnMe:HseMsg.ServerMessage.NewUser = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.ServerMessage.NewUser) throws -> HseMsg.ServerMessage.NewUser.Builder {
            if other == HseMsg.ServerMessage.NewUser() {
             return self
            }
            if (other.hasUser) {
                try mergeUser(other.user)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.NewUser.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.NewUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder:HseMsg.User.Builder = HseMsg.User.Builder()
                if hasUser {
                  try subBuilder.mergeFrom(user)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class Event : GeneratedMessage, GeneratedMessageProtocol {


        //OneOf declaration start

        public enum Event {
          case EventOneOfNotSet

          public func checkOneOfIsSet() -> Bool {
               switch self {
               case .EventOneOfNotSet:
                    return false
               default:
                    return true
               }
          }
          case NewMessage(HseMsg.ServerMessage.NewMessage)

          public static func getNewMessage(value:Event) -> HseMsg.ServerMessage.NewMessage? {
               switch value {
               case .NewMessage(let enumValue):
                    return enumValue
               default:
                    return nil
               }
          }
          case NewUser(HseMsg.ServerMessage.NewUser)

          public static func getNewUser(value:Event) -> HseMsg.ServerMessage.NewUser? {
               switch value {
               case .NewUser(let enumValue):
                    return enumValue
               default:
                    return nil
               }
          }
        }
        //OneOf declaration end

        private var storageEvent:ServerMessage.Event.Event =  ServerMessage.Event.Event.EventOneOfNotSet
        public private(set) var newMessage:HseMsg.ServerMessage.NewMessage!{
             get {
                  return ServerMessage.Event.Event.getNewMessage(storageEvent)
             }
             set (newvalue) {
                  storageEvent = ServerMessage.Event.Event.NewMessage(newvalue)
             }
        }
        public private(set) var hasNewMessage:Bool {
              get {
                   if ServerMessage.Event.Event.getNewMessage(storageEvent) == nil {
                       return false
                   }
                   return true
              }
              set(newValue) {
              }
        }
        public private(set) var newUser:HseMsg.ServerMessage.NewUser!{
             get {
                  return ServerMessage.Event.Event.getNewUser(storageEvent)
             }
             set (newvalue) {
                  storageEvent = ServerMessage.Event.Event.NewUser(newvalue)
             }
        }
        public private(set) var hasNewUser:Bool {
              get {
                   if ServerMessage.Event.Event.getNewUser(storageEvent) == nil {
                       return false
                   }
                   return true
              }
              set(newValue) {
              }
        }
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if hasNewMessage {
           if !newMessage.isInitialized() {
             return false
           }
          }
          if hasNewUser {
           if !newUser.isInitialized() {
             return false
           }
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasNewMessage {
            try output.writeMessage(1, value:newMessage)
          }
          if hasNewUser {
            try output.writeMessage(2, value:newUser)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasNewMessage {
              if let varSizenewMessage = newMessage?.computeMessageSize(1) {
                  serialize_size += varSizenewMessage
              }
          }
          if hasNewUser {
              if let varSizenewUser = newUser?.computeMessageSize(2) {
                  serialize_size += varSizenewUser
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.ServerMessage.Event> {
          var mergedArray = Array<HseMsg.ServerMessage.Event>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.Event? {
          return try HseMsg.ServerMessage.Event.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.Event {
          return try HseMsg.ServerMessage.Event.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> HseMsg.ServerMessage.Event.Builder {
          return HseMsg.ServerMessage.Event.classBuilder() as! HseMsg.ServerMessage.Event.Builder
        }
        public func getBuilder() -> HseMsg.ServerMessage.Event.Builder {
          return classBuilder() as! HseMsg.ServerMessage.Event.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.Event.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return HseMsg.ServerMessage.Event.Builder()
        }
        public func toBuilder() throws -> HseMsg.ServerMessage.Event.Builder {
          return try HseMsg.ServerMessage.Event.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:HseMsg.ServerMessage.Event) throws -> HseMsg.ServerMessage.Event.Builder {
          return try HseMsg.ServerMessage.Event.Builder().mergeFrom(prototype)
        }
        override public func getDescription(indent:String) throws -> String {
          var output:String = ""
          if hasNewMessage {
            output += "\(indent) newMessage {\n"
            if let outDescNewMessage = newMessage {
              output += try outDescNewMessage.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasNewUser {
            output += "\(indent) newUser {\n"
            if let outDescNewUser = newUser {
              output += try outDescNewUser.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasNewMessage {
                    if let hashValuenewMessage = newMessage?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuenewMessage
                    }
                }
                if hasNewUser {
                    if let hashValuenewUser = newUser?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuenewUser
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "HseMsg.ServerMessage.Event"
        }
        override public func className() -> String {
            return "HseMsg.ServerMessage.Event"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return HseMsg.ServerMessage.Event.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:HseMsg.ServerMessage.Event = HseMsg.ServerMessage.Event()
          public func getMessage() -> HseMsg.ServerMessage.Event {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasNewMessage:Bool {
               get {
                   return builderResult.hasNewMessage
               }
          }
          public var newMessage:HseMsg.ServerMessage.NewMessage! {
               get {
                   if newMessageBuilder_ != nil {
                      builderResult.newMessage = newMessageBuilder_.getMessage()
                   }
                   return builderResult.newMessage
               }
               set (value) {
                   builderResult.hasNewMessage = true
                   builderResult.newMessage = value
               }
          }
          private var newMessageBuilder_:HseMsg.ServerMessage.NewMessage.Builder! {
               didSet {
                  builderResult.hasNewMessage = true
               }
          }
          public func getNewMessageBuilder() -> HseMsg.ServerMessage.NewMessage.Builder {
            if newMessageBuilder_ == nil {
               newMessageBuilder_ = HseMsg.ServerMessage.NewMessage.Builder()
               builderResult.newMessage = newMessageBuilder_.getMessage()
               if newMessage != nil {
                  try! newMessageBuilder_.mergeFrom(newMessage)
               }
            }
            return newMessageBuilder_
          }
          public func setNewMessage(value:HseMsg.ServerMessage.NewMessage!) -> HseMsg.ServerMessage.Event.Builder {
            self.newMessage = value
            return self
          }
          public func mergeNewMessage(value:HseMsg.ServerMessage.NewMessage) throws -> HseMsg.ServerMessage.Event.Builder {
            if builderResult.hasNewMessage {
              builderResult.newMessage = try HseMsg.ServerMessage.NewMessage.builderWithPrototype(builderResult.newMessage).mergeFrom(value).buildPartial()
            } else {
              builderResult.newMessage = value
            }
            builderResult.hasNewMessage = true
            return self
          }
          public func clearNewMessage() -> HseMsg.ServerMessage.Event.Builder {
            newMessageBuilder_ = nil
            builderResult.hasNewMessage = false
            builderResult.newMessage = nil
            return self
          }
          public var hasNewUser:Bool {
               get {
                   return builderResult.hasNewUser
               }
          }
          public var newUser:HseMsg.ServerMessage.NewUser! {
               get {
                   if newUserBuilder_ != nil {
                      builderResult.newUser = newUserBuilder_.getMessage()
                   }
                   return builderResult.newUser
               }
               set (value) {
                   builderResult.hasNewUser = true
                   builderResult.newUser = value
               }
          }
          private var newUserBuilder_:HseMsg.ServerMessage.NewUser.Builder! {
               didSet {
                  builderResult.hasNewUser = true
               }
          }
          public func getNewUserBuilder() -> HseMsg.ServerMessage.NewUser.Builder {
            if newUserBuilder_ == nil {
               newUserBuilder_ = HseMsg.ServerMessage.NewUser.Builder()
               builderResult.newUser = newUserBuilder_.getMessage()
               if newUser != nil {
                  try! newUserBuilder_.mergeFrom(newUser)
               }
            }
            return newUserBuilder_
          }
          public func setNewUser(value:HseMsg.ServerMessage.NewUser!) -> HseMsg.ServerMessage.Event.Builder {
            self.newUser = value
            return self
          }
          public func mergeNewUser(value:HseMsg.ServerMessage.NewUser) throws -> HseMsg.ServerMessage.Event.Builder {
            if builderResult.hasNewUser {
              builderResult.newUser = try HseMsg.ServerMessage.NewUser.builderWithPrototype(builderResult.newUser).mergeFrom(value).buildPartial()
            } else {
              builderResult.newUser = value
            }
            builderResult.hasNewUser = true
            return self
          }
          public func clearNewUser() -> HseMsg.ServerMessage.Event.Builder {
            newUserBuilder_ = nil
            builderResult.hasNewUser = false
            builderResult.newUser = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> HseMsg.ServerMessage.Event.Builder {
            builderResult = HseMsg.ServerMessage.Event()
            return self
          }
          public override func clone() throws -> HseMsg.ServerMessage.Event.Builder {
            return try HseMsg.ServerMessage.Event.builderWithPrototype(builderResult)
          }
          public override func build() throws -> HseMsg.ServerMessage.Event {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> HseMsg.ServerMessage.Event {
            let returnMe:HseMsg.ServerMessage.Event = builderResult
            return returnMe
          }
          public func mergeFrom(other:HseMsg.ServerMessage.Event) throws -> HseMsg.ServerMessage.Event.Builder {
            if other == HseMsg.ServerMessage.Event() {
             return self
            }
            if (other.hasNewMessage) {
                try mergeNewMessage(other.newMessage)
            }
            if (other.hasNewUser) {
                try mergeNewUser(other.newUser)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.Event.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.Event.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder:HseMsg.ServerMessage.NewMessage.Builder = HseMsg.ServerMessage.NewMessage.Builder()
                if hasNewMessage {
                  try subBuilder.mergeFrom(newMessage)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                newMessage = subBuilder.buildPartial()

              case 18 :
                let subBuilder:HseMsg.ServerMessage.NewUser.Builder = HseMsg.ServerMessage.NewUser.Builder()
                if hasNewUser {
                  try subBuilder.mergeFrom(newUser)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                newUser = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Message_ {
      case Message_OneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .Message_OneOfNotSet:
                return false
           default:
                return true
           }
      }
      case Event(HseMsg.ServerMessage.Event)

      public static func getEvent(value:Message_) -> HseMsg.ServerMessage.Event? {
           switch value {
           case .Event(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case Result(HseMsg.Result)

      public static func getResult(value:Message_) -> HseMsg.Result? {
           switch value {
           case .Result(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageMessage_:ServerMessage.Message_ =  ServerMessage.Message_.Message_OneOfNotSet
    public private(set) var event:HseMsg.ServerMessage.Event!{
         get {
              return ServerMessage.Message_.getEvent(storageMessage_)
         }
         set (newvalue) {
              storageMessage_ = ServerMessage.Message_.Event(newvalue)
         }
    }
    public private(set) var hasEvent:Bool {
          get {
               if ServerMessage.Message_.getEvent(storageMessage_) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var result:HseMsg.Result!{
         get {
              return ServerMessage.Message_.getResult(storageMessage_)
         }
         set (newvalue) {
              storageMessage_ = ServerMessage.Message_.Result(newvalue)
         }
    }
    public private(set) var hasResult:Bool {
          get {
               if ServerMessage.Message_.getResult(storageMessage_) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasEvent {
       if !event.isInitialized() {
         return false
       }
      }
      if hasResult {
       if !result.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEvent {
        try output.writeMessage(1, value:event)
      }
      if hasResult {
        try output.writeMessage(2, value:result)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEvent {
          if let varSizeevent = event?.computeMessageSize(1) {
              serialize_size += varSizeevent
          }
      }
      if hasResult {
          if let varSizeresult = result?.computeMessageSize(2) {
              serialize_size += varSizeresult
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<HseMsg.ServerMessage> {
      var mergedArray = Array<HseMsg.ServerMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage? {
      return try HseMsg.ServerMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromData(data, extensionRegistry:HseMsg.HseMsgRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage {
      return try HseMsg.ServerMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> HseMsg.ServerMessage.Builder {
      return HseMsg.ServerMessage.classBuilder() as! HseMsg.ServerMessage.Builder
    }
    public func getBuilder() -> HseMsg.ServerMessage.Builder {
      return classBuilder() as! HseMsg.ServerMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return HseMsg.ServerMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return HseMsg.ServerMessage.Builder()
    }
    public func toBuilder() throws -> HseMsg.ServerMessage.Builder {
      return try HseMsg.ServerMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:HseMsg.ServerMessage) throws -> HseMsg.ServerMessage.Builder {
      return try HseMsg.ServerMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasEvent {
        output += "\(indent) event {\n"
        if let outDescEvent = event {
          output += try outDescEvent.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasResult {
        output += "\(indent) result {\n"
        if let outDescResult = result {
          output += try outDescResult.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEvent {
                if let hashValueevent = event?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueevent
                }
            }
            if hasResult {
                if let hashValueresult = result?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueresult
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "HseMsg.ServerMessage"
    }
    override public func className() -> String {
        return "HseMsg.ServerMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return HseMsg.ServerMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:HseMsg.ServerMessage = HseMsg.ServerMessage()
      public func getMessage() -> HseMsg.ServerMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEvent:Bool {
           get {
               return builderResult.hasEvent
           }
      }
      public var event:HseMsg.ServerMessage.Event! {
           get {
               if eventBuilder_ != nil {
                  builderResult.event = eventBuilder_.getMessage()
               }
               return builderResult.event
           }
           set (value) {
               builderResult.hasEvent = true
               builderResult.event = value
           }
      }
      private var eventBuilder_:HseMsg.ServerMessage.Event.Builder! {
           didSet {
              builderResult.hasEvent = true
           }
      }
      public func getEventBuilder() -> HseMsg.ServerMessage.Event.Builder {
        if eventBuilder_ == nil {
           eventBuilder_ = HseMsg.ServerMessage.Event.Builder()
           builderResult.event = eventBuilder_.getMessage()
           if event != nil {
              try! eventBuilder_.mergeFrom(event)
           }
        }
        return eventBuilder_
      }
      public func setEvent(value:HseMsg.ServerMessage.Event!) -> HseMsg.ServerMessage.Builder {
        self.event = value
        return self
      }
      public func mergeEvent(value:HseMsg.ServerMessage.Event) throws -> HseMsg.ServerMessage.Builder {
        if builderResult.hasEvent {
          builderResult.event = try HseMsg.ServerMessage.Event.builderWithPrototype(builderResult.event).mergeFrom(value).buildPartial()
        } else {
          builderResult.event = value
        }
        builderResult.hasEvent = true
        return self
      }
      public func clearEvent() -> HseMsg.ServerMessage.Builder {
        eventBuilder_ = nil
        builderResult.hasEvent = false
        builderResult.event = nil
        return self
      }
      public var hasResult:Bool {
           get {
               return builderResult.hasResult
           }
      }
      public var result:HseMsg.Result! {
           get {
               if resultBuilder_ != nil {
                  builderResult.result = resultBuilder_.getMessage()
               }
               return builderResult.result
           }
           set (value) {
               builderResult.hasResult = true
               builderResult.result = value
           }
      }
      private var resultBuilder_:HseMsg.Result.Builder! {
           didSet {
              builderResult.hasResult = true
           }
      }
      public func getResultBuilder() -> HseMsg.Result.Builder {
        if resultBuilder_ == nil {
           resultBuilder_ = HseMsg.Result.Builder()
           builderResult.result = resultBuilder_.getMessage()
           if result != nil {
              try! resultBuilder_.mergeFrom(result)
           }
        }
        return resultBuilder_
      }
      public func setResult(value:HseMsg.Result!) -> HseMsg.ServerMessage.Builder {
        self.result = value
        return self
      }
      public func mergeResult(value:HseMsg.Result) throws -> HseMsg.ServerMessage.Builder {
        if builderResult.hasResult {
          builderResult.result = try HseMsg.Result.builderWithPrototype(builderResult.result).mergeFrom(value).buildPartial()
        } else {
          builderResult.result = value
        }
        builderResult.hasResult = true
        return self
      }
      public func clearResult() -> HseMsg.ServerMessage.Builder {
        resultBuilder_ = nil
        builderResult.hasResult = false
        builderResult.result = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> HseMsg.ServerMessage.Builder {
        builderResult = HseMsg.ServerMessage()
        return self
      }
      public override func clone() throws -> HseMsg.ServerMessage.Builder {
        return try HseMsg.ServerMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> HseMsg.ServerMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> HseMsg.ServerMessage {
        let returnMe:HseMsg.ServerMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:HseMsg.ServerMessage) throws -> HseMsg.ServerMessage.Builder {
        if other == HseMsg.ServerMessage() {
         return self
        }
        if (other.hasEvent) {
            try mergeEvent(other.event)
        }
        if (other.hasResult) {
            try mergeResult(other.result)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> HseMsg.ServerMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> HseMsg.ServerMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:HseMsg.ServerMessage.Event.Builder = HseMsg.ServerMessage.Event.Builder()
            if hasEvent {
              try subBuilder.mergeFrom(event)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            event = subBuilder.buildPartial()

          case 18 :
            let subBuilder:HseMsg.Result.Builder = HseMsg.Result.Builder()
            if hasResult {
              try subBuilder.mergeFrom(result)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            result = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
